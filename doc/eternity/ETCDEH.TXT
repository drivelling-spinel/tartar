===============================================
Dehacked support in Eternity, extended support
===============================================

Changes:

6/30/01 Added info on [SPRITES], [SOUNDS], [MUSIC] blocks

5/10/01 Added information on DORMANT flag

9/26/00 Added information on [HELPER] bex block, updated bits2

9/14/00 Added thing bits2 field information, new thing information,
new frame information, new codepointer information, revision on start up
messages

8/28/98 added mnemonic representation for the bits of an item
definition.  Also added an appendix B with the default bit
states for all DOOM2 Things.

5/16/98 added a A_NULL codepointer entry to clear an already
existing code pointer to zero.

5/3/98 added SAVEGAMENAME string parameter to change the first
part of the savegame name.  0-7 is appended during save.

-------------------------------THINGS-----------------------------
#####
USAGE
#####

This is actually something you can use to hack your Dehacked
output file to be more understandable and modifiable.  Note that
once you do this you won't be able to bring it back into 
Dehacked.

You will find an area in a Dehacked output file for Things,
starting with an entry such as:

  Thing 31 (Barrel)

Down a few lines, if you've altered the bits at all, you'll see 
a line like:

  Bits = 205636102

That horrible number is why we are providing some mnemonics
instead.  All you need to do is to put the appropriate ones
of the following mnemonics on the line where the big number is,
and it'll be read in and converted to the number for you.  An
example line:

  Bits = SOLID+SHOOTABLE+NOBLOOD

which converts to Bits = 524294 but you didn't have to figure
that part out.  Just use plus signs between the mnemonics.
Here's the list, along with a bit of explanation of each, 
and the phrase that's used in Dehacked to describe them.  If
there are any disagreements between the 2 definitions, ours
wins.  There is a complete list of all the DOOM2 Things in 
Appendix B at the end of this file, with which bits they have
by default in BOOM (including for example which Things are
translucent)

  Mnemonic      Bit mask     Meaning / Dehacked phrase
  ------------------------------------------------------------------
  SPECIAL,      0x00000001 - call P_Specialthing when touched
                                  Can be picked up
  SOLID,        0x00000002 - block movement
                                  Obstacle
  SHOOTABLE,    0x00000004 - can be hit
                                  Shootable
  NOSECTOR,     0x00000008 - invisible but touchable
                                  Total invisibility
  NOBLOCKMAP,   0x00000010 - inert but displayable
                                  Can't be hit
  AMBUSH,       0x00000020 - deaf monster
                                  Semi-deaf
  JUSTHIT,      0x00000040 - will try to attack right back
                                  In pain
  JUSTATTACKED, 0x00000080 - take at least 1 step before attacking
                                  Steps before attack
  SPAWNCEILING, 0x00000100 - initially hang from ceiling
                                  Hangs from ceiling
  NOGRAVITY,    0x00000200 - don't apply gravity during play
                                  No Gravity
  DROPOFF,      0x00000400 - can jump from high places
                                  Travels over cliffs
  PICKUP,       0x00000800 - will pick up items
                                  Picks up items
  NOCLIP,       0x00001000 - goes through walls
                                  No clipping
  SLIDE,        0x00002000 - keep info about sliding along walls
                                  Slides along walls
  FLOAT,        0x00004000 - allow movement to any height
                                  Floating
  TELEPORT,     0x00008000 - don't cross lines or look at teleport heights
                                  Semi-no clipping
  MISSILE,      0x00010000 - don't hit same species, explode on block
                                  Projectiles
  DROPPED,      0x00020000 - dropped, not spawned (like ammo clip)
                                  Disappearing weapon
  SHADOW,       0x00040000 - use fuzzy draw like spectres
                                  Partial invisibility
  NOBLOOD,      0x00080000 - puffs instead of blood when shot
                                  Puffs (vs. bleeds)
  CORPSE,       0x00100000 - so it will slide down steps when dead
                                  Sliding helpless
  INFLOAT,      0x00200000 - float but not to target height
                                  No auto-leveling
  COUNTKILL,    0x00400000 - count toward the kills total
                                  Affects Kill %
  COUNTITEM,    0x00800000 - count toward the items total
                                  Affects Item %
  SKULLFLY,     0x01000000 - special handling for flying skulls
                                  Running
  NOTDMATCH,    0x02000000 - do not spawn in deathmatch
                                  Not in deathmatch
  TRANSLATION,  0x04000000 - use translation table for color (players
  (aka TRANSLATION1)              Color 1 (gray/red)
  
  UNUSED1,      0x08000000 - undefined or second bit for translation
  (aka TRANSLATION2)              Color 2 (brown/red)
                                  
  UNUSED2,      0x10000000 - undefined
  (aka TOUCHY)			  Thing will die on contact with any other
  				  solid object of a different species (Lost Souls
  				  and Pain Elementals are considered the same
  				  species)
  UNUSED3,      0x20000000 - undefined
  (aka BOUNCES)			  Thing may bounce off walls and ceilings, see
  				  MBF documentation for further information.
  UNUSED4,      0x40000000 - undefined
  (aka FRIEND)			  Thing is allied with player
  TRANSLUCENT,  0x80000000 - apply translucency to sprite (BOOM)

*** New to Eternity ***
Eternity includes a Bits2 field that can be put in the normal thing definition.
This field functions similarly to the Bits field, but enables new advanced
effects. This field uses the following mnemonics:

  LOGRAV	0x00000001 - thing experiences low gravity
  
  NOSPLASH 	0x00000002 - thing does not trigger TerrainTypes
  
  DIEDFALLING 	0x00000004 - internal flag used for player falling death
  
  NORESPAWN     0x00000008 - thing will not respawn in nightmare mode
  
  ALWAYSRESPAWN 0x00000010 - thing will respawn at any difficulty level
  
  REMOVEDEAD    0x00000020 - thing removes itself shortly after death
  
  NOTHRUST      0x00000040 - thing is unaffected by push/pull, wind, current,
                             or conveyors
  
  NOCROSS       0x00000080 - thing cannot trigger crossable special lines                             
  
  PUSHABLE 	0x00000200 - thing is pushable by other moving things
  
  BOSS 		0x00008000 - thing is a boss: 
                              * roars loud 
                              * invincible to explosions
                              * not subject to some special Eternity 
                                code pointer effects
  
  FLOATBOB 	0x00080000 - thing floats up and down on z axis
  
  DONTDRAW 	0x00100000 - thing is totally invisible
  
  CANTLEAVEFLOORPIC
                0x02000000 - thing is restricted to movement within sectors with
                             the same flat as it currently sits on  
  
  INVULNERABLE 	0x08000000 - thing is invulnerable to damage less than 10000 pts
                             (telefrag does 10k damage)
  
  DORMANT       0x10000000 - thing is invulnerable and inert until activated 
                             by a script (does not work unless thing also has
                             the DORMANT map flag)
  
  SEEKERMISSILE 0x20000000 - internal flag indicating that this thing may be
                             used as a homing missile, necessary for proper
                             reflection
  
  DEFLECTIVE    0x40000000 - when paired with REFLECTIVE, thing will send
                             missiles off at a wide angle
  
  REFLECTIVE 	0x80000000 - thing reflects missile projectiles  

Notes for these flags:
----------------------
LOGRAV has no effect on BOUNCY things

DIEDFALLING will only affect players, and may cause the player to make the 
 DSFALLHT sound when dying
 
REMOVEDEAD naturally has the additional effect of preventing respawning in
 nightmare mode, similar to the way in which lost souls and pain elementals
 cannot respawn. This flag could cause weird effects if placed on the player,
 so this is not suggested.

FLOATBOB should not be used for sentient things in general

Players with the DONTDRAW flag can only wake up normal enemies by shooting,
 and deaf enemies only by damaging them directly.

DORMANT does not function as expected unless a thing that has it spawned on the
map at startup with the DORMANT mapthing flag set in the level itself. It cannot
be switched on and off freely.

DEFLECTIVE has no effect unless paired with REFLECTIVE

REFLECTIVE does not impart invulnerability, and unless paired with that flag,
 the object will take damage before bouncing the projectile back.

----------------------------CODE POINTERS-------------------------
#####
USAGE
#####

Insert this block into your BEX file:

[CODEPTR]
FRAME nn = mnemonic
...

The Frame number is the same as you would use in Dehacked, and the
mnemonic is one of the ones listed below.  These mnemonics, though
not perfectly clear, are the actual names of the functions in DOOM
that are called, so it makes the most sense to use them. 

When using Dehacked frame code pointer changes, BOOM will write out
a line for each one used showing what you'd put into a BEX [CODEPTR] 
block, in the DEHOUT.TXT file.  For example:

  Original Dehacked file lines:

     Pointer 93 (Frame 196)
     Codep Frame = 176

  Output from BOOM in the DEHOUT.TXT file when processing them:

    Line='Pointer 93 (Frame 196)'
    Processing function [2] for Pointer
    Processing Pointer at index 196: Frame
     - applied 1c53c from codeptr[176] to states[196]
    BEX [CODEPTR] -> FRAME 196 = Chase

  You could then use this in the [CODEPTR] block of a BEX file 
  instead of the Dehacked lines, making it much more clear 
  that in frame 196 you expect the monster to Chase the player:

    FRAME 196 = Chase

In addition, you can now put any code pointer into any frame, whereas
Dehacked is limited to replacing only the existing ones.

Valid mnemonics you can use:

    NULL  <<  new, zeroes out an existing codepointer
    Light0
    WeaponReady
    Lower
    Raise
    Punch
    ReFire
    FirePistol
    Light1
    FireShotgun
    Light2
    FireShotgun2
    CheckReload
    OpenShotgun2
    LoadShotgun2
    CloseShotgun2
    FireCGun
    GunFlash
    FireMissile
    Saw
    FirePlasma
    BFGsound
    FireBFG
    BFGSpray
    Explode
    Pain
    PlayerScream
    Fall
    XScream
    Look
    Chase
    FaceTarget
    PosAttack
    Scream
    SPosAttack
    VileChase
    VileStart
    VileTarget
    VileAttack
    StartFire
    Fire
    FireCrackle
    Tracer
    SkelWhoosh
    SkelFist
    SkelMissile
    FatRaise
    FatAttack1
    FatAttack2
    FatAttack3
    BossDeath
    CPosAttack
    CPosRefire
    TroopAttack
    SargAttack
    HeadAttack
    BruisAttack
    SkullAttack
    Metal
    SpidRefire
    BabyMetal
    BspiAttack
    Hoof
    CyberAttack
    PainAttack
    PainDie
    KeenDie
    BrainPain
    BrainScream
    BrainDie
    BrainAwake
    BrainSpit
    SpawnSound
    SpawnFly
    BrainExplode

The following codepointers are new to MBF/SMMU:
    Detonate
    Mushroom
    Die
    Spawn
    Turn
    Face
    Scratch
    PlaySound
    RandomJump
    LineEffect
    Nailbomb

Further documentation of some of these is available in the MBF documentation.
A more comprehensive reference will eventually be produced.

The following codepointers are new to Eternity:

    MinotaurAtk1
    MinotaurDecide
    MinotaurAtk2
    MinotaurAtk3
    MinotaurCharge
    MntrFloorFire
    ETCBossDeath
    AmbSound
    ColgSound
    ClericAtk
    SetInvulnerability
    UnSetInvulnerability
    FogSpawn
    FogMove
    GhostOn
    GhostOff
    HideThing
    UnHideThing
    BlurOn
    BlurOff
    SetReflective
    UnSetReflective
    Cleric2Chase
    Cleric2Decide
    Cleric2Attack
    ClericBreak
    DwarfDie
    CyberGuardSigh
    CyberGuardWake
    DwarfLDOCMagic
    DwarfFWAEMagic
    DwarfAlterEgoChase
    DwarfAlterEgoAttack
    FireGrenade
    PhoenixTracer
    AxePieceFall
    Sparkle
    StartScript
    RunScript
    MummyHeadScream
    MummyAttack
    MummySoul

A comprehensive reference on these will eventually be produced.

See the end of this file for the Code Pointer Appendix
which contains the actual default settings for code pointers
and frames.  Remember, changing code pointers with BEX files is
no less prone to you trying to do something impossible that will
crash than it ever was in Dehacked--it's just simpler and more
flexible, and clearer to read, in specification.


----------------------------PAR TIMES-----------------------------
#####
USAGE
#####

Insert the following block in your BEX file, using one or more
of the par lines depending on if you want to alter them for
DOOM 1 or DOOM 2.

[PARS]
par e m p      << for DOOM 1: episode, map, parseconds
par m p        << for DOOM 2: mapnumber, parseconds

You may have as many par times listed as you wish in the pars block.

----------------------------INCLUDES------------------------------
#####
USAGE
#####

To include a DEH or BEX file in another one, put one or more of the
following lines in your BEX file:


INCLUDE filename
INCLUDE NOTEXT filename

Filename must be specified in full, including a path if it's not
going to be in the current directory, and including its .deh or
.bex extension.  By far better is to ship a file as a completely
self-contained file, but you can use this during testing and development.

The NOTEXT directive will cause BOOM to skip any deh-style text blocks
in the included file, with the assumption that you're doing something
else in your main BEX file instead.  Note that this will include any text
changes, including sprite names, etc.

You may not nest include files (one include file can't include another).

-----------------------------STRINGS------------------------------
##########
BACKGROUND
##########

The basic Dehacked file is understood and properly evaluated to change
such things as sounds, frame rewiring, Thing attributes, etc.  No change
is required to the original .deh file for those things.  However, text
is handled differently in BOOM for several reasons:

1.  Dehacked by the nature of the program was simply doing a search and
replace action on the strings as found in the executable.  This is 
clumsy and dangerous, though as good as can be done when dealing with
a compiled executable program.  We now have the ability to change the
actual string values during play, a safer and better solution.

2.  Because Dehacked used the original string to find the place to 
plug in the replacement, there was no way to write a generic hack that
would replace strings in all versions regardless of language.  In BOOM,
the strings are identified by their names, which are the same in all
cases.

3.  Because Dehacked was replacing strings in a physical location in
the program file, it was limited to approximately the same size string
as the original.  Though this is generally practical, it is limiting in
flexibility.  BOOM allows any length string to replace any of the ones
in the game (this also applies to cheats).

4.  The purpose of replacing a string is to show the player some text
at a particular point in the game.  Finding the original text that was
there and replacing it with other text worked, but logically what the 
author should have been able to do was assign strings depending on the
desired purpose, and not have to recognize the original text to do so.
In BOOM, all strings are identified by a mnemonic name (actually the
name of the internal variable), making it easier to assign a string to
its desired purpose.  In later versions we may also make other aliases
for some of those.

Detailed information is available further down in this file, explaining
the mnemonic codes that are used for all the replaceable strings. Note
that some of the strings are always displayed in the small (uppercase
only) font, so capitalization is not important for those.  

The dehacked method of supplying an old texture followed by a new one,
with the lengths of the before and after strings in the dehacked file,
will be supported so long as the old string can be found as the default
value of one of the supported strings (see below).  This should take 
care of 97% of actual hacks, since intermission texts, informational
messages and level names for the automap are by far the most 
prevalent and important changes.  We urge the patch authors to also
provide new BEX format files, for clarity, supportability and 
flexibility.

#####
USAGE
#####

To use extended string support in BOOM, start the section with a 
[STRINGS] section marker, followed by lines that start with the key
mnemonic, an equal sign, and the value to assign to that string.  You
may split the value to be assigned onto multiple lines by ending
each line that is to be continued with a backslash.  Don't put 
quotes around the string if you don't want them to show up in the
result.  A couple of examples:

# Start comments with a #
# Change the level name that shows up in the automap for MAP12:
[STRINGS]
HUSTR_12 = The Twelfth Night
# and now the new red key message for switches
PD_REDO = You need the scarlet pimpernel to \
          turn on this machine.
# Note that the blank before the backslash is included in the string
# but that the indentation before the word "turn" is not, allowing
# the change file to be easy to read.

Other example files are included in the BEX_SAMP.ZIP file.  All use the
.bex extension to avoid conflict with existing .deh files of the same
name.

########################################
MNEMONIC KEYS AND ORIGINAL VALUES TABLES
########################################

Note:
If the original initial value is longer than about 40 characters, 
the string will have been truncated and will have an ellipsis (...)
after the closing double-quote.  There should be enough in the part
that is shown to recognize it.

If a string has C language printf() characters in it, such as %s or %d, 
you should be sure that your replacement string either contains the 
same ones in the same order, or that you leave them out of your string.  
If that confuses you, you need to learn C or leave 'em alone <g>.  
Some trailing linefeeds have been removed for clarity, though \n in 
the middle of a string indicates an internal linefeed and your 
replacement can do likewise.

===========================================
Part 1 - GENERAL INITIALIZATION AND PROMPTS
===========================================

MNEMONIC           Purpose
                     Initial original value (just the first part if long)
------------------ -----------------------------------------------------
D_DEVSTR           What shows during init if -devparm is used
                     "Development mode ON."
D_CDROM            Init: if switch -cdrom is used
                     "CD-ROM Version: default.cfg from c:\\doomdata"
QUITMSG            Default display when you pick Quit
                     "are you sure you want to\nquit this great game?"
LOADNET            Warning when you try to load during a network game
                     "you can't do load while in a net game!"
QLOADNET           Warning when you try quickload during a network game
                     "you can't quickload during a netgame!"
QSAVESPOT          Warning when you quickload without a quicksaved game
                     "you haven't picked a quicksave slot yet!"
SAVEDEAD           Warning when not playing or dead and you try to save
                     "you can't save if you aren't playing!"
QSPROMPT           Prompt when quicksaving your game
                     "quicksave over your game named\n\n'%s'?"
QLPROMPT           Prompt when quickloading a game
                     "do you want to quickload the game named\n\n'%s'?"
NEWGAME            Warning if you try to start a game during network play
                     "you can't start a new game\nwhile in a network"...
NIGHTMARE          Nightmare mode warning
                     "are you sure? this skill level\nisn't even rem"...
SWSTRING           Warning when you pick any episode but 1 in Shareware
                     "this is the shareware version of doom.\n\nyou '...
MSGOFF             Message when toggling messages off (F8)
                     "Messages OFF"
MSGON              Message when toggling messages back on (F8)
                     "Messages ON"
NETEND             Message when you try to Quit during a network game
                     "you can't end a netgame!"
ENDGAME            Warning when you try to end the game
                     "are you sure you want to end the game?"
DETAILHI           Message switching to high detail (obsolete in BOOM)
                     "High detail"
DETAILLO           Message switching to high detail (obsolete in BOOM)
                     "Low detail"
GAMMALVL0          Message when gamma correction is set off
                     "Gamma correction OFF"
GAMMALVL1          Message when gamma correction is set to 1
                     "Gamma correction level 1"
GAMMALVL2          Message when gamma correction is set to 2
                     "Gamma correction level 2"
GAMMALVL3          Message when gamma correction is set to 3
                     "Gamma correction level 3"
GAMMALVL4          Message when gamma correction is set to 4
                     "Gamma correction level 4"
EMPTYSTRING        Value that shows up in an unused savegame slot
                     "empty slot"
GGSAVED            Message after a savegame has been written to disk
                     "game saved."
SAVEGAMENAME       Saved game name, number is appended during save
                     "BOOMSAV"  << new 5/3/98

=============================================
Part 2 - MESSAGES WHEN THE PLAYER GETS THINGS
=============================================

GOTARMOR           Picking up the Green armor (100%)
                     "Picked up the armor."
GOTMEGA            Picking up the Blue armor (200%)
                     "Picked up the MegaArmor!"
GOTHTHBONUS        Picking up a health bottle (1%)
                     "Picked up a health bonus."
GOTARMBONUS        Picking up an armor helmet (1%)
                     "Picked up an armor bonus."
GOTSTIM            Picking up a stimpack (10%)
                     "Picked up a stimpack."
GOTMEDINEED        Picking up a medikit (25%) when very low on health
                     "Picked up a medikit that you REALLY need!"
GOTMEDIKIT         Picking up a medikit (25%) under normal conditions
                     "Picked up a medikit."
GOTSUPER           Picking up the blue health orb (200%)
                     "Supercharge!"
GOTBLUECARD        Picking up the blue keycard
                     "Picked up a blue keycard."
GOTYELWCARD        Picking up the yellow keycard
                     "Picked up a yellow keycard."
GOTREDCARD         Picking up the red keycard
                     "Picked up a red keycard."
GOTBLUESKUL        Picking up the blue skull key
                     "Picked up a blue skull key."
GOTYELWSKUL        Picking up the yellow skull key
                     "Picked up a yellow skull key."
GOTREDSKULL        Picking up the red skull key
                     "Picked up a red skull key."
GOTINVUL           Picking up the invulnerability sphere
                     "Invulnerability!"
GOTBERSERK         Picking up the berserk box
                     "Berserk!"
GOTINVIS           Picking up the invisibility sphere
                     "Partial Invisibility"
GOTSUIT            Picking up the rad suit
                     "Radiation Shielding Suit"
GOTMAP             Picking up the computer map
                     "Computer Area Map"
GOTVISOR           Picking up the light-amp goggles
                     "Light Amplification Visor"
GOTMSPHERE         Picking up the mega orb (200%/200%)
                     "MegaSphere!"
GOTCLIP            Picking up an ammo clip
                     "Picked up a clip."
GOTCLIPBOX         Picking up a box of ammo
                     "Picked up a box of bullets."
GOTROCKET          Picking up a single rocket
                     "Picked up a rocket."
GOTROCKBOX         Picking up a box of rockets
                     "Picked up a box of rockets."
GOTCELL            Picking up an energy cell (20 units)
                     "Picked up an energy cell."
GOTCELLBOX         Picking up an energy pack (100 units)
                     "Picked up an energy cell pack."
GOTSHELLS          Picking up a set of 4 shells
                     "Picked up 4 shotgun shells."
GOTSHELLBOX        Picking up a box of 20 shells
                     "Picked up a box of shotgun shells."
GOTBACKPACK        Picking up a backpack
                     "Picked up a backpack full of ammo!"
GOTBFG9000         Picking up the BFG (weapon 7)
                     "You got the BFG9000!  Oh, yes."
GOTCHAINGUN        Picking up the chaingun (weapon 4)
                     "You got the chaingun!"
GOTCHAINSAW        Picking up the chainsaw (weapon 8)
                     "A chainsaw!  Find some meat!"
GOTLAUNCHER        Picking up the rocket launcher (weapon 5)
                     "You got the rocket launcher!"
GOTPLASMA          Picking up the plasma gun (weapon 6)
                     "You got the plasma gun!"
GOTSHOTGUN         Picking up the shotgun (weapon 3)
                     "You got the shotgun!"
GOTSHOTGUN2        Picking up the double-barreled shotgun (weapon 9)
                     "You got the super shotgun!"

======================================
Part 3 - MESSAGES WHEN KEYS ARE NEEDED (*)= BOOM extensions
======================================

PD_BLUEO           When you don't have the blue key for a switch
                     "You need a blue key to activate this object"
PD_REDO            When you don't have the red key for a switch
                     "You need a red key to activate this object"
PD_YELLOWO         When you don't have the yellow key for a switch
                     "You need a yellow key to activate this object"
PD_BLUEK           Blue key needed to open a door
                     "You need a blue key to open this door"
PD_REDK            Red key needed to open a door
                     "You need a red key to open this door"
PD_YELLOWK         Yellow key needed to open a door
                     "You need a yellow key to open this door"
PD_BLUEC           Blue card key needed, not skull (*)
                     "You need a blue card to open this door"
PD_REDC            Red card key needed, not skull (*)
                     "You need a red card to open this door"
PD_YELLOWC         Yellow card key needed, not skull (*)
                     "You need a yellow card to open this door"
PD_BLUES           Blue skull key needed, not card (*)
                     "You need a blue skull to open this door"
PD_REDS            Red skull key needed, not card (*)
                     "You need a red skull to open this door"
PD_YELLOWS         Yellow skull key needed, not card (*)
                     "You need a yellow skull to open this door"
PD_ANY             You need a key but any of them will do (*)
                     "Any key will open this door"
PD_ALL3            You need red, blue and yellow keys (*)
                     "You need all three keys to open this door"
PD_ALL6            You need both skulls and cards in all 3 colors (*)
                     "You need all six keys to open this door"

==============================
Part 4 - MULTIPLAYER MESSAGING
==============================

HUSTR_MSGU         If you try to send a blank message?
                     "[Message unsent]"
HUSTR_MESSAGESENT  After you send a message?  Haven't seen it
                     "[Message Sent]"

* Chat macros 1-10
* Original values in quotes

HUSTR_CHATMACRO1        "I'm ready to kick butt!"
HUSTR_CHATMACRO2        "I'm OK."
HUSTR_CHATMACRO3        "I'm not looking too good!"
HUSTR_CHATMACRO4        "Help!"
HUSTR_CHATMACRO5        "You suck!"
HUSTR_CHATMACRO6        "Next time, scumbag..."
HUSTR_CHATMACRO7        "Come here!"
HUSTR_CHATMACRO8        "I'll take care of it."
HUSTR_CHATMACRO9        "Yes"
HUSTR_CHATMACRO0        "No"

* What shows up when you message yourself, depending
* on how many times you've done it during the game

HUSTR_TALKTOSELF1       "You mumble to yourself"
HUSTR_TALKTOSELF2       "Who's there?"
HUSTR_TALKTOSELF3       "You scare yourself"
HUSTR_TALKTOSELF4       "You start to rave"
HUSTR_TALKTOSELF5       "You've lost it..."

* Prefixes for the multiplayer messages when displayed

HUSTR_PLRGREEN  "Green: "
HUSTR_PLRINDIGO "Indigo: "
HUSTR_PLRBROWN  "Brown: "
HUSTR_PLRRED      "Red: "

===================================
Part 5 - LEVEL NAMES IN THE AUTOMAP
===================================

* For DOOM - These names are made up of HUSTR_ and 
* ExMx for the episode and map numbers.  Original
* names are shown in quotes.  Episode 4 entries are
* for Ultimate DOOM only.  
* Blank lines separate sky change groupings

HUSTR_E1M1      "E1M1: Hangar"
HUSTR_E1M2      "E1M2: Nuclear Plant"
HUSTR_E1M3      "E1M3: Toxin Refinery"
HUSTR_E1M4      "E1M4: Command Control"
HUSTR_E1M5      "E1M5: Phobos Lab"
HUSTR_E1M6      "E1M6: Central Processing"
HUSTR_E1M7      "E1M7: Computer Station"
HUSTR_E1M8      "E1M8: Phobos Anomaly"
HUSTR_E1M9      "E1M9: Military Base"

HUSTR_E2M1      "E2M1: Deimos Anomaly"
HUSTR_E2M2      "E2M2: Containment Area"
HUSTR_E2M3      "E2M3: Refinery"
HUSTR_E2M4      "E2M4: Deimos Lab"
HUSTR_E2M5      "E2M5: Command Center"
HUSTR_E2M6      "E2M6: Halls of the Damned"
HUSTR_E2M7      "E2M7: Spawning Vats"
HUSTR_E2M8      "E2M8: Tower of Babel"
HUSTR_E2M9      "E2M9: Fortress of Mystery"

HUSTR_E3M1      "E3M1: Hell Keep"
HUSTR_E3M2      "E3M2: Slough of Despair"
HUSTR_E3M3      "E3M3: Pandemonium"
HUSTR_E3M4      "E3M4: House of Pain"
HUSTR_E3M5      "E3M5: Unholy Cathedral"
HUSTR_E3M6      "E3M6: Mt. Erebus"
HUSTR_E3M7      "E3M7: Limbo"
HUSTR_E3M8      "E3M8: Dis"
HUSTR_E3M9      "E3M9: Warrens"

HUSTR_E4M1      "E4M1: Hell Beneath"
HUSTR_E4M2      "E4M2: Perfect Hatred"
HUSTR_E4M3      "E4M3: Sever The Wicked"
HUSTR_E4M4      "E4M4: Unruly Evil"
HUSTR_E4M5      "E4M5: They Will Repent"
HUSTR_E4M6      "E4M6: Against Thee Wickedly"
HUSTR_E4M7      "E4M7: And Hell Followed"
HUSTR_E4M8      "E4M8: Unto The Cruel"
HUSTR_E4M9      "E4M9: Fear"

* For DOOM2 - These names are made up of HUSTR_ and 
* a number for the map number.  Original names are shown in quotes.
* Blank lines separate sky change groupings

HUSTR_1 "level 1: entryway"
HUSTR_2 "level 2: underhalls"
HUSTR_3 "level 3: the gantlet"
HUSTR_4 "level 4: the focus"
HUSTR_5 "level 5: the waste tunnels"
HUSTR_6 "level 6: the crusher"
HUSTR_7 "level 7: dead simple"
HUSTR_8 "level 8: tricks and traps"
HUSTR_9 "level 9: the pit"
HUSTR_10        "level 10: refueling base"
HUSTR_11        "level 11: 'o' of destruction!"

HUSTR_12        "level 12: the factory"
HUSTR_13        "level 13: downtown"
HUSTR_14        "level 14: the inmost dens"
HUSTR_15        "level 15: industrial zone"
HUSTR_16        "level 16: suburbs"
HUSTR_17        "level 17: tenements"
HUSTR_18        "level 18: the courtyard"
HUSTR_19        "level 19: the citadel"
HUSTR_20        "level 20: gotcha!"

HUSTR_21        "level 21: nirvana"
HUSTR_22        "level 22: the catacombs"
HUSTR_23        "level 23: barrels o' fun"
HUSTR_24        "level 24: the chasm"
HUSTR_25        "level 25: bloodfalls"
HUSTR_26        "level 26: the abandoned mines"
HUSTR_27        "level 27: monster condo"
HUSTR_28        "level 28: the spirit world"
HUSTR_29        "level 29: the living end"
HUSTR_30        "level 30: icon of sin"

* Secret levels

HUSTR_31        "level 31: wolfenstein"
HUSTR_32        "level 32: grosse"

* For PLUTONIA - These names are made up of PHUSTR_ and 
* a number for the map number.  Original names are shown in quotes.
* Blank lines separate sky change groupings

PHUSTR_1        "level 1: congo"
PHUSTR_2        "level 2: well of souls"
PHUSTR_3        "level 3: aztec"
PHUSTR_4        "level 4: caged"
PHUSTR_5        "level 5: ghost town"
PHUSTR_6        "level 6: baron's lair"
PHUSTR_7        "level 7: caughtyard"
PHUSTR_8        "level 8: realm"
PHUSTR_9        "level 9: abattoire"
PHUSTR_10       "level 10: onslaught"
PHUSTR_11       "level 11: hunted"

PHUSTR_12       "level 12: speed"
PHUSTR_13       "level 13: the crypt"
PHUSTR_14       "level 14: genesis"
PHUSTR_15       "level 15: the twilight"
PHUSTR_16       "level 16: the omen"
PHUSTR_17       "level 17: compound"
PHUSTR_18       "level 18: neurosphere"
PHUSTR_19       "level 19: nme"
PHUSTR_20       "level 20: the death domain"

PHUSTR_21       "level 21: slayer"
PHUSTR_22       "level 22: impossible mission"
PHUSTR_23       "level 23: tombstone"
PHUSTR_24       "level 24: the final frontier"
PHUSTR_25       "level 25: the temple of darkness"
PHUSTR_26       "level 26: bunker"
PHUSTR_27       "level 27: anti-christ"
PHUSTR_28       "level 28: the sewers"
PHUSTR_29       "level 29: odyssey of noises"
PHUSTR_30       "level 30: the gateway of hell"

PHUSTR_31       "level 31: cyberden"
PHUSTR_32       "level 32: go 2 it"

* For TNT:Evilution - These names are made up of THUSTR_ and 
* a number for the map number.  Original names are shown in quotes.
* Blank lines separate sky change groupings

THUSTR_1        "level 1: system control"
THUSTR_2        "level 2: human bbq"
THUSTR_3        "level 3: power control"
THUSTR_4        "level 4: wormhole"
THUSTR_5        "level 5: hanger"
THUSTR_6        "level 6: open season"
THUSTR_7        "level 7: prison"
THUSTR_8        "level 8: metal"
THUSTR_9        "level 9: stronghold"
THUSTR_10       "level 10: redemption"
THUSTR_11       "level 11: storage facility"

THUSTR_12       "level 12: crater"
THUSTR_13       "level 13: nukage processing"
THUSTR_14       "level 14: steel works"
THUSTR_15       "level 15: dead zone"
THUSTR_16       "level 16: deepest reaches"
THUSTR_17       "level 17: processing area"
THUSTR_18       "level 18: mill"
THUSTR_19       "level 19: shipping/respawning"
THUSTR_20       "level 20: central processing"

THUSTR_21       "level 21: administration center"
THUSTR_22       "level 22: habitat"
THUSTR_23       "level 23: lunar mining project"
THUSTR_24       "level 24: quarry"
THUSTR_25       "level 25: baron's den"
THUSTR_26       "level 26: ballistyx"
THUSTR_27       "level 27: mount pain"
THUSTR_28       "level 28: heck"
THUSTR_29       "level 29: river styx"
THUSTR_30       "level 30: last call"

THUSTR_31       "level 31: pharaoh"
THUSTR_32       "level 32: caribbean"

================================================
Part 6 - MESSAGES AS A RESULT OF TOGGLING STATES
================================================

AMSTR_FOLLOWON     Automap follow mode toggled on (F)
                     "Follow Mode ON"
AMSTR_FOLLOWOFF    Automap follow mode toggled off (F)
                     "Follow Mode OFF"
AMSTR_GRIDON       Automap grid mode toggled on (G)
                     "Grid ON"
AMSTR_GRIDOFF      Automap grid mode toggled off (G)
                     "Grid OFF"
AMSTR_MARKEDSPOT   Automap spot marked (M)
                     "Marked Spot"
AMSTR_MARKSCLEARED Automap marks cleared (C)
                     "All Marks Cleared" 
STSTR_MUS          Music changed with IDMUSnn
                     "Music Change"
STSTR_NOMUS        Error message [IDMUS] to bad number
                     "IMPOSSIBLE SELECTION"
STSTR_DQDON        God mode toggled on [IDDQD]
                     "Degreelessness Mode On"
STSTR_DQDOFF       God mode toggled off [IDDQD]
                     "Degreelessness Mode Off"
STSTR_KFAADDED     Ammo and keys added [IDKFA]
                     "Very Happy Ammo Added"
STSTR_FAADDED      Ammo no keys added [IDK or IDKA]
                     "Ammo (no keys) Added"
STSTR_NCON         Walk through walls toggled on [IDCLIP or IDSPISPOPD]
                     "No Clipping Mode ON"
STSTR_NCOFF        Walk through walls off [IDCLIP or IDSPISPOPD]
                     "No Clipping Mode OFF"
STSTR_BEHOLD       Prompt for IDBEHOLD cheat menu
                     "inVuln, Str, Inviso, Rad, Allmap, or Lite-amp"
STSTR_BEHOLDX      Prompt after toggling the special with IDBEHOLD
                     "Power-up Toggled"
STSTR_CHOPPERS     Message when the chainsaw is picked [IDCHOPPERS]
                     "... doesn't suck - GM"
STSTR_CLEV         Message while changing levels [IDCLEVxx]
                     "Changing Level..."
STSTR_COMPON       Message when turning on DOOM compatibility mode (*)
                     "Compatibility Mode On"
STSTR_COMPOFF      Message when turning off DOOM compatibility mode (*)
                     "Compatibility Mode Off"


===================================
Part 7 - EPISODE INTERMISSION TEXTS
===================================

* DOOM/Ultimate DOOM Intermissions

E1TEXT             Message after Episode 1 of DOOM
                     "Once you beat the big badasses and\nclean out "...
E2TEXT             Message after Episode 2 of DOOM
                     "You've done it! The hideous cyber-\ndemon lord"...
E3TEXT             Message after Episode 3 of DOOM
                     "The loathsome spiderdemon that\nmasterminded t"...
E4TEXT             Message after Episode 4 of Ultimate DOOM
                     "the spider mastermind must have sent forth\nit"...

* DOOM2 Intermissions

C1TEXT             Message after MAP06
                     "YOU HAVE ENTERED DEEPLY INTO THE INFESTED\nSTA"...
C2TEXT             Message after MAP11
                     "YOU HAVE WON! YOUR VICTORY HAS ENABLED\nHUMANK"...
C3TEXT             Message after MAP20
                     "YOU ARE AT THE CORRUPT HEART OF THE CITY,\nSUR"...
C4TEXT             Message after MAP30
                     "THE HORRENDOUS VISAGE OF THE BIGGEST\nDEMON YO"...
C5TEXT             Message when entering MAP31
                     "CONGRATULATIONS, YOU'VE FOUND THE SECRET\nLEVE"...
C6TEXT             Message when entering MAP32
                     "CONGRATULATIONS, YOU'VE FOUND THE\nSUPER SECRE"...

* PLUTONIA Intermissions

P1TEXT             Message after MAP06
                     "You gloat over the steaming carcass of the\nGu"...
P2TEXT             Message after MAP11
                     "Even the deadly Arch-Vile labyrinth could\nnot"...
P3TEXT             Message after MAP20
                     "You've bashed and battered your way into\nthe "...
P4TEXT             Message after MAP30
                     "The Gatekeeper's evil face is splattered\nall "...
P5TEXT             Message when entering MAP31
                     "You've found the second-hardest level we\ngot."...
P6TEXT             Message when entering MAP32
                     "Betcha wondered just what WAS the hardest\nlev"...

* TNT:Evilution Intermissions

T1TEXT             Message after MAP06
                     "You've fought your way out of the infested\nex"...
T2TEXT             Message after MAP11
                     "You hear the grinding of heavy machinery\nahea"...
T3TEXT             Message after MAP20
                     "The vista opening ahead looks real damn\nfamil"...
T4TEXT             Message after MAP30
                     "Suddenly, all is silent, from one horizon\nto "...
T5TEXT             Message when entering MAP31
                     "What now? Looks totally different. Kind\nof li"...
T6TEXT             Message when entering MAP32
                     "Time for a vacation. You've burst the\nbowels "...


======================================
Part 8 - CREATURE NAMES FOR THE FINALE
======================================

CC_ZOMBIE          Trooper
                     "ZOMBIEMAN"
CC_SHOTGUN         Sargeant
                     "SHOTGUN GUY"
CC_HEAVY           Chaingunner
                     "HEAVY WEAPON DUDE"
CC_IMP             Imp
                     "IMP"
CC_DEMON           Demon
                     "DEMON"
CC_LOST            Lost Soul
                     "LOST SOUL"
CC_CACO            Cacodemon
                     "CACODEMON"
CC_HELL            Hell Knight
                     "HELL KNIGHT"
CC_BARON           Baron of Hell
                     "BARON OF HELL"
CC_ARACH           Arachnotron (baby spider)
                     "ARACHNOTRON"
CC_PAIN            Pain Elemental
                     "PAIN ELEMENTAL"
CC_REVEN           Revenant
                     "REVENANT"
CC_MANCU           Mancubus
                     "MANCUBUS"
CC_ARCH            Arch Vile
                     "ARCH-VILE"
CC_SPIDER          Spider Mastermind
                     "THE SPIDER MASTERMIND"
CC_CYBER           Cyberdemon
                     "THE CYBERDEMON"
CC_HERO            Green player
                     "OUR HERO"

=======================================
Part 9 - INTERMISSION TILED BACKGROUNDS
=======================================

BGFLATE1           End of DOOM Episode 1
                     "FLOOR4_8"
BGFLATE2           End of DOOM Episode 2
                     "SFLR6_1"
BGFLATE3           End of DOOM Episode 3
                     "MFLR8_4"
BGFLATE4           End of DOOM Episode 4
                     "MFLR8_3"
BGFLAT06           DOOM2 after MAP06
                     "SLIME16"
BGFLAT11           DOOM2 after MAP11
                     "RROCK14"
BGFLAT20           DOOM2 after MAP20
                     "RROCK07"
BGFLAT30           DOOM2 after MAP30
                     "RROCK17"
BGFLAT15           DOOM2 going MAP15 to MAP31
                     "RROCK13"
BGFLAT31           DOOM2 going MAP31 to MAP32
                     "RROCK19"
BGCASTCALL         Panel behind cast call    
                     "BOSSBACK"

==============================
Part 10 - NEW: STARTUP BANNERS
==============================

STARTUP1           Starting strings to be displayed during startup
                     ""
STARTUP2           Leave them blank to not display
                     ""
STARTUP3           You may include \n to split a line
                     ""
STARTUP4           Have a nice time
                     ""
STARTUP5           Burma Shave
                     ""
Note: If Eternity is set to start in graphics mode, these messages will be
displayed in the console after the name of the engine is displayed, rather than
first off in text mode. Otherwise they behave as in BOOM and MBF.

=======================================================================

=================================
Part 11 - NEW ETERNITY BEX BLOCKS
=================================

Eternity supports new extensions to the BEX standard.

1. [HELPER] Block

This block can be used to specify the type of thing the player will get for
friendly helpers by using the -dogs command-line option. Rather than rewiring
the MT_DOGS thing to make it emulate other enemies, you may now make this
simple two-line substitution.

Syntax:
----------------

[HELPER]
type = thingnum

-----------------

where thingnum is the DeHackEd number of the thing type you want to replace
the dogs. If this value is out of range, dogs will spawn and a warning message
will be posted to the player. Note that this can be any valid thing type, even
torches (a torch is not a very helpful thing however) or fireballs (which will
sit there inertly). It is desirable however to alter the radii and height of 
many enemies before using them, as they will become stuck to each other and the 
player otherwise.

Note that the dog jumping options also affect any helper substitute, and that
all friendly things of the helper type are allowed to jump down to follow the
player.

2. [SPRITES] Block

In Ty Halderman's change log he noted that sprite, sound, and music renaming
should be implemented as separate blocks. Up until now, its only been possible
to replace these strings with the old DeHackEd-style text blocks, which are
impractical to use and have limitations.

The SPRITES block can change the 4-letter prefix of any sprite type. The
mnemonic to use is the normal sprite name. That is, if you want to rename the
sprite that's normally named TROO, you use the mnemonic TROO, even if TROO
has already been changed to a new string. Changing the sprite names will not
change their corresponding mnemonics.

Syntax:
----------------

[SPRITES]
mnemonic = string

-----------------

string must be exactly 4 characters long, or the substitution will not occur.

3. [SOUNDS] Block

The SOUNDS block can change the name of any sound. The mnemonic to use is the 
normal sound name, minus the "DS" that is normally appended to wad lumps. That 
is, if you want to rename the sound that's normally named DSPISTOL, you use the 
mnemonic PISTOL, even if PISTOL has already been changed to a new string. 
Changing the sound names will not change their corresponding mnemonics.

Syntax:
----------------

[SOUNDS]
mnemonic = string

-----------------

string must be from 1 to 6 characters long, or the substitution will not occur.

4. [MUSIC]

The MUSIC block can change the name of any song. The mnemonic to use is the 
normal song name, minus the "D_" that is normally appended to wad lumps. That 
is, if you want to rename the music that's normally named D_RUNNIN, you use the 
mnemonic RUNNIN, even if RUNNIN has already been changed to a new string. 
Changing the song names will not change their corresponding mnemonics.

Syntax:
----------------

[MUSIC]
mnemonic = string

-----------------

string must be from 1 to 6 characters long, or the substitution will not occur.

=======================================================================

#################################
CODE POINTER INFORMATION APPENDIX
#################################

This comes directly from the source code, with frame numbers inserted.  
at the beginning of the line.  Values are as follows, separated by :
commas.  Don't worry if you don't understand C, you'll get the idea.
This is the stuff that Dehacked messes with in the Frames section,
and for the most part we don't care because we don't do that stuff
in here.  Note that the "zero'th" entry is a dummy one--don't use it.

  First, 3 things we can ignore
     Name of the sprite, preceded by SPR_
     Subsprite number
     Duration in tics

  Then the code pointer, which is what we really care about here
     Code pointer 

  Then some frame info and spare parts
     Next frame if any (see the // comment at the end of
       the line for the identifier for that line)
     A couple of zeroes

Wherever you see {NULL} as the code pointer, that means there
isn't anything there now.  Otherwise it's the mnemonic we use
in BOOM BEX file code pointers, preceded by "A_".  A mnemonic
entry for the NULL pointer is available using mnemonic "NULL"

[0] dummy {SPR_TROO,0,-1,{NULL},S_NULL,0,0},  // S_NULL
[1]       {SPR_SHTG,4,0,{A_Light0},S_NULL,0,0}, // S_LIGHTDONE
[2]       {SPR_PUNG,0,1,{A_WeaponReady},S_PUNCH,0,0}, // S_PUNCH
[3]       {SPR_PUNG,0,1,{A_Lower},S_PUNCHDOWN,0,0}, // S_PUNCHDOWN
[4]       {SPR_PUNG,0,1,{A_Raise},S_PUNCHUP,0,0}, // S_PUNCHUP
[5]       {SPR_PUNG,1,4,{NULL},S_PUNCH2,0,0},   // S_PUNCH1
[6]       {SPR_PUNG,2,4,{A_Punch},S_PUNCH3,0,0},  // S_PUNCH2
[7]       {SPR_PUNG,3,5,{NULL},S_PUNCH4,0,0},   // S_PUNCH3
[8]       {SPR_PUNG,2,4,{NULL},S_PUNCH5,0,0},   // S_PUNCH4
[9]       {SPR_PUNG,1,5,{A_ReFire},S_PUNCH,0,0},  // S_PUNCH5
[10]      {SPR_PISG,0,1,{A_WeaponReady},S_PISTOL,0,0},// S_PISTOL
[11]      {SPR_PISG,0,1,{A_Lower},S_PISTOLDOWN,0,0},  // S_PISTOLDOWN
[12]      {SPR_PISG,0,1,{A_Raise},S_PISTOLUP,0,0},  // S_PISTOLUP
[13]      {SPR_PISG,0,4,{NULL},S_PISTOL2,0,0},  // S_PISTOL1
[14]      {SPR_PISG,1,6,{A_FirePistol},S_PISTOL3,0,0},// S_PISTOL2
[15]      {SPR_PISG,2,4,{NULL},S_PISTOL4,0,0},  // S_PISTOL3
[16]      {SPR_PISG,1,5,{A_ReFire},S_PISTOL,0,0}, // S_PISTOL4
[17]      {SPR_PISF,32768,7,{A_Light1},S_LIGHTDONE,0,0},  // S_PISTOLFLASH
[18]      {SPR_SHTG,0,1,{A_WeaponReady},S_SGUN,0,0},  // S_SGUN
[19]      {SPR_SHTG,0,1,{A_Lower},S_SGUNDOWN,0,0},  // S_SGUNDOWN
[20]      {SPR_SHTG,0,1,{A_Raise},S_SGUNUP,0,0},  // S_SGUNUP
[21]      {SPR_SHTG,0,3,{NULL},S_SGUN2,0,0},  // S_SGUN1
[22]      {SPR_SHTG,0,7,{A_FireShotgun},S_SGUN3,0,0}, // S_SGUN2
[23]      {SPR_SHTG,1,5,{NULL},S_SGUN4,0,0},  // S_SGUN3
[24]      {SPR_SHTG,2,5,{NULL},S_SGUN5,0,0},  // S_SGUN4
[25]      {SPR_SHTG,3,4,{NULL},S_SGUN6,0,0},  // S_SGUN5
[26]      {SPR_SHTG,2,5,{NULL},S_SGUN7,0,0},  // S_SGUN6
[27]      {SPR_SHTG,1,5,{NULL},S_SGUN8,0,0},  // S_SGUN7
[28]      {SPR_SHTG,0,3,{NULL},S_SGUN9,0,0},  // S_SGUN8
[29]      {SPR_SHTG,0,7,{A_ReFire},S_SGUN,0,0}, // S_SGUN9
[30]      {SPR_SHTF,32768,4,{A_Light1},S_SGUNFLASH2,0,0}, // S_SGUNFLASH1
[31]      {SPR_SHTF,32769,3,{A_Light2},S_LIGHTDONE,0,0},  // S_SGUNFLASH2
[32]      {SPR_SHT2,0,1,{A_WeaponReady},S_DSGUN,0,0}, // S_DSGUN
[33]      {SPR_SHT2,0,1,{A_Lower},S_DSGUNDOWN,0,0}, // S_DSGUNDOWN
[34]      {SPR_SHT2,0,1,{A_Raise},S_DSGUNUP,0,0}, // S_DSGUNUP
[35]      {SPR_SHT2,0,3,{NULL},S_DSGUN2,0,0}, // S_DSGUN1
[36]      {SPR_SHT2,0,7,{A_FireShotgun2},S_DSGUN3,0,0}, // S_DSGUN2
[37]      {SPR_SHT2,1,7,{NULL},S_DSGUN4,0,0}, // S_DSGUN3
[38]      {SPR_SHT2,2,7,{A_CheckReload},S_DSGUN5,0,0},  // S_DSGUN4
[39]      {SPR_SHT2,3,7,{A_OpenShotgun2},S_DSGUN6,0,0}, // S_DSGUN5
[40]      {SPR_SHT2,4,7,{NULL},S_DSGUN7,0,0}, // S_DSGUN6
[41]      {SPR_SHT2,5,7,{A_LoadShotgun2},S_DSGUN8,0,0}, // S_DSGUN7
[42]      {SPR_SHT2,6,6,{NULL},S_DSGUN9,0,0}, // S_DSGUN8
[43]      {SPR_SHT2,7,6,{A_CloseShotgun2},S_DSGUN10,0,0}, // S_DSGUN9
[44]      {SPR_SHT2,0,5,{A_ReFire},S_DSGUN,0,0},  // S_DSGUN10
[45]      {SPR_SHT2,1,7,{NULL},S_DSNR2,0,0},  // S_DSNR1
[46]      {SPR_SHT2,0,3,{NULL},S_DSGUNDOWN,0,0},  // S_DSNR2
[47]      {SPR_SHT2,32776,5,{A_Light1},S_DSGUNFLASH2,0,0},  // S_DSGUNFLASH1
[48]      {SPR_SHT2,32777,4,{A_Light2},S_LIGHTDONE,0,0},  // S_DSGUNFLASH2
[49]      {SPR_CHGG,0,1,{A_WeaponReady},S_CHAIN,0,0}, // S_CHAIN
[50]      {SPR_CHGG,0,1,{A_Lower},S_CHAINDOWN,0,0}, // S_CHAINDOWN
[51]      {SPR_CHGG,0,1,{A_Raise},S_CHAINUP,0,0}, // S_CHAINUP
[52]      {SPR_CHGG,0,4,{A_FireCGun},S_CHAIN2,0,0}, // S_CHAIN1
[53]      {SPR_CHGG,1,4,{A_FireCGun},S_CHAIN3,0,0}, // S_CHAIN2
[54]      {SPR_CHGG,1,0,{A_ReFire},S_CHAIN,0,0},  // S_CHAIN3
[55]      {SPR_CHGF,32768,5,{A_Light1},S_LIGHTDONE,0,0},  // S_CHAINFLASH1
[56]      {SPR_CHGF,32769,5,{A_Light2},S_LIGHTDONE,0,0},  // S_CHAINFLASH2
[57]      {SPR_MISG,0,1,{A_WeaponReady},S_MISSILE,0,0}, // S_MISSILE
[58]      {SPR_MISG,0,1,{A_Lower},S_MISSILEDOWN,0,0}, // S_MISSILEDOWN
[59]      {SPR_MISG,0,1,{A_Raise},S_MISSILEUP,0,0}, // S_MISSILEUP
[60]      {SPR_MISG,1,8,{A_GunFlash},S_MISSILE2,0,0}, // S_MISSILE1
[61]      {SPR_MISG,1,12,{A_FireMissile},S_MISSILE3,0,0}, // S_MISSILE2
[62]      {SPR_MISG,1,0,{A_ReFire},S_MISSILE,0,0},  // S_MISSILE3
[63]      {SPR_MISF,32768,3,{A_Light1},S_MISSILEFLASH2,0,0},  // S_MISSILEFLASH1
[64]      {SPR_MISF,32769,4,{NULL},S_MISSILEFLASH3,0,0},  // S_MISSILEFLASH2
[65]      {SPR_MISF,32770,4,{A_Light2},S_MISSILEFLASH4,0,0},  // S_MISSILEFLASH3
[66]      {SPR_MISF,32771,4,{A_Light2},S_LIGHTDONE,0,0},  // S_MISSILEFLASH4
[67]      {SPR_SAWG,2,4,{A_WeaponReady},S_SAWB,0,0},  // S_SAW
[68]      {SPR_SAWG,3,4,{A_WeaponReady},S_SAW,0,0}, // S_SAWB
[69]      {SPR_SAWG,2,1,{A_Lower},S_SAWDOWN,0,0}, // S_SAWDOWN
[70]      {SPR_SAWG,2,1,{A_Raise},S_SAWUP,0,0}, // S_SAWUP
[71]      {SPR_SAWG,0,4,{A_Saw},S_SAW2,0,0}, // S_SAW1
[72]      {SPR_SAWG,1,4,{A_Saw},S_SAW3,0,0},  // S_SAW2
[73]      {SPR_SAWG,1,0,{A_ReFire},S_SAW,0,0},  // S_SAW3
[74]      {SPR_PLSG,0,1,{A_WeaponReady},S_PLASMA,0,0},  // S_PLASMA
[75]      {SPR_PLSG,0,1,{A_Lower},S_PLASMADOWN,0,0},  // S_PLASMADOWN
[76]      {SPR_PLSG,0,1,{A_Raise},S_PLASMAUP,0,0},  // S_PLASMAUP
[77]      {SPR_PLSG,0,3,{A_FirePlasma},S_PLASMA2,0,0},  // S_PLASMA1
[78]      {SPR_PLSG,1,20,{A_ReFire},S_PLASMA,0,0},  // S_PLASMA2
[79]      {SPR_PLSF,32768,4,{A_Light1},S_LIGHTDONE,0,0},  // S_PLASMAFLASH1
[80]      {SPR_PLSF,32769,4,{A_Light1},S_LIGHTDONE,0,0},  // S_PLASMAFLASH2
[81]      {SPR_BFGG,0,1,{A_WeaponReady},S_BFG,0,0}, // S_BFG
[82]      {SPR_BFGG,0,1,{A_Lower},S_BFGDOWN,0,0}, // S_BFGDOWN
[83]      {SPR_BFGG,0,1,{A_Raise},S_BFGUP,0,0}, // S_BFGUP
[84]      {SPR_BFGG,0,20,{A_BFGsound},S_BFG2,0,0},  // S_BFG1
[85]      {SPR_BFGG,1,10,{A_GunFlash},S_BFG3,0,0},  // S_BFG2
[86]      {SPR_BFGG,1,10,{A_FireBFG},S_BFG4,0,0}, // S_BFG3
[87]      {SPR_BFGG,1,20,{A_ReFire},S_BFG,0,0}, // S_BFG4
[88]      {SPR_BFGF,32768,11,{A_Light1},S_BFGFLASH2,0,0}, // S_BFGFLASH1
[89]      {SPR_BFGF,32769,6,{A_Light2},S_LIGHTDONE,0,0},  // S_BFGFLASH2
[90]      {SPR_BLUD,2,8,{NULL},S_BLOOD2,0,0}, // S_BLOOD1
[91]      {SPR_BLUD,1,8,{NULL},S_BLOOD3,0,0}, // S_BLOOD2
[92]      {SPR_BLUD,0,8,{NULL},S_NULL,0,0}, // S_BLOOD3
[93]      {SPR_PUFF,32768,4,{NULL},S_PUFF2,0,0},  // S_PUFF1
[94]      {SPR_PUFF,1,4,{NULL},S_PUFF3,0,0},  // S_PUFF2
[95]      {SPR_PUFF,2,4,{NULL},S_PUFF4,0,0},  // S_PUFF3
[96]      {SPR_PUFF,3,4,{NULL},S_NULL,0,0}, // S_PUFF4
[97]      {SPR_BAL1,32768,4,{NULL},S_TBALL2,0,0}, // S_TBALL1
[98]      {SPR_BAL1,32769,4,{NULL},S_TBALL1,0,0}, // S_TBALL2
[99]      {SPR_BAL1,32770,6,{NULL},S_TBALLX2,0,0},  // S_TBALLX1
[100]     {SPR_BAL1,32771,6,{NULL},S_TBALLX3,0,0},  // S_TBALLX2
[101]     {SPR_BAL1,32772,6,{NULL},S_NULL,0,0}, // S_TBALLX3
[102]     {SPR_BAL2,32768,4,{NULL},S_RBALL2,0,0}, // S_RBALL1
[103]     {SPR_BAL2,32769,4,{NULL},S_RBALL1,0,0}, // S_RBALL2
[104]     {SPR_BAL2,32770,6,{NULL},S_RBALLX2,0,0},  // S_RBALLX1
[105]     {SPR_BAL2,32771,6,{NULL},S_RBALLX3,0,0},  // S_RBALLX2
[106]     {SPR_BAL2,32772,6,{NULL},S_NULL,0,0}, // S_RBALLX3
[107]     {SPR_PLSS,32768,6,{NULL},S_PLASBALL2,0,0},  // S_PLASBALL
[108]     {SPR_PLSS,32769,6,{NULL},S_PLASBALL,0,0}, // S_PLASBALL2
[109]     {SPR_PLSE,32768,4,{NULL},S_PLASEXP2,0,0}, // S_PLASEXP
[110]     {SPR_PLSE,32769,4,{NULL},S_PLASEXP3,0,0}, // S_PLASEXP2
[111]     {SPR_PLSE,32770,4,{NULL},S_PLASEXP4,0,0}, // S_PLASEXP3
[112]     {SPR_PLSE,32771,4,{NULL},S_PLASEXP5,0,0}, // S_PLASEXP4
[113]     {SPR_PLSE,32772,4,{NULL},S_NULL,0,0}, // S_PLASEXP5
[114]     {SPR_MISL,32768,1,{NULL},S_ROCKET,0,0}, // S_ROCKET
[115]     {SPR_BFS1,32768,4,{NULL},S_BFGSHOT2,0,0}, // S_BFGSHOT
[116]     {SPR_BFS1,32769,4,{NULL},S_BFGSHOT,0,0},  // S_BFGSHOT2
[117]     {SPR_BFE1,32768,8,{NULL},S_BFGLAND2,0,0}, // S_BFGLAND
[118]     {SPR_BFE1,32769,8,{NULL},S_BFGLAND3,0,0}, // S_BFGLAND2
[119]     {SPR_BFE1,32770,8,{A_BFGSpray},S_BFGLAND4,0,0}, // S_BFGLAND3
[120]     {SPR_BFE1,32771,8,{NULL},S_BFGLAND5,0,0}, // S_BFGLAND4
[121]     {SPR_BFE1,32772,8,{NULL},S_BFGLAND6,0,0}, // S_BFGLAND5
[122]     {SPR_BFE1,32773,8,{NULL},S_NULL,0,0}, // S_BFGLAND6
[123]     {SPR_BFE2,32768,8,{NULL},S_BFGEXP2,0,0},  // S_BFGEXP
[124]     {SPR_BFE2,32769,8,{NULL},S_BFGEXP3,0,0},  // S_BFGEXP2
[125]     {SPR_BFE2,32770,8,{NULL},S_BFGEXP4,0,0},  // S_BFGEXP3
[126]     {SPR_BFE2,32771,8,{NULL},S_NULL,0,0}, // S_BFGEXP4
[127]     {SPR_MISL,32769,8,{A_Explode},S_EXPLODE2,0,0},  // S_EXPLODE1
[128]     {SPR_MISL,32770,6,{NULL},S_EXPLODE3,0,0}, // S_EXPLODE2
[129]     {SPR_MISL,32771,4,{NULL},S_NULL,0,0}, // S_EXPLODE3
[130]     {SPR_TFOG,32768,6,{NULL},S_TFOG01,0,0}, // S_TFOG
[131]     {SPR_TFOG,32769,6,{NULL},S_TFOG02,0,0}, // S_TFOG01
[132]     {SPR_TFOG,32768,6,{NULL},S_TFOG2,0,0},  // S_TFOG02
[133]     {SPR_TFOG,32769,6,{NULL},S_TFOG3,0,0},  // S_TFOG2
[134]     {SPR_TFOG,32770,6,{NULL},S_TFOG4,0,0},  // S_TFOG3
[135]     {SPR_TFOG,32771,6,{NULL},S_TFOG5,0,0},  // S_TFOG4
[136]     {SPR_TFOG,32772,6,{NULL},S_TFOG6,0,0},  // S_TFOG5
[137]     {SPR_TFOG,32773,6,{NULL},S_TFOG7,0,0},  // S_TFOG6
[138]     {SPR_TFOG,32774,6,{NULL},S_TFOG8,0,0},  // S_TFOG7
[139]     {SPR_TFOG,32775,6,{NULL},S_TFOG9,0,0},  // S_TFOG8
[140]     {SPR_TFOG,32776,6,{NULL},S_TFOG10,0,0}, // S_TFOG9
[141]     {SPR_TFOG,32777,6,{NULL},S_NULL,0,0}, // S_TFOG10
[142]     {SPR_IFOG,32768,6,{NULL},S_IFOG01,0,0}, // S_IFOG
[143]     {SPR_IFOG,32769,6,{NULL},S_IFOG02,0,0}, // S_IFOG01
[144]     {SPR_IFOG,32768,6,{NULL},S_IFOG2,0,0},  // S_IFOG02
[145]     {SPR_IFOG,32769,6,{NULL},S_IFOG3,0,0},  // S_IFOG2
[146]     {SPR_IFOG,32770,6,{NULL},S_IFOG4,0,0},  // S_IFOG3
[147]     {SPR_IFOG,32771,6,{NULL},S_IFOG5,0,0},  // S_IFOG4
[148]     {SPR_IFOG,32772,6,{NULL},S_NULL,0,0}, // S_IFOG5
[149]     {SPR_PLAY,0,-1,{NULL},S_NULL,0,0},  // S_PLAY
[150]     {SPR_PLAY,0,4,{NULL},S_PLAY_RUN2,0,0},  // S_PLAY_RUN1
[151]     {SPR_PLAY,1,4,{NULL},S_PLAY_RUN3,0,0},  // S_PLAY_RUN2
[152]     {SPR_PLAY,2,4,{NULL},S_PLAY_RUN4,0,0},  // S_PLAY_RUN3
[153]     {SPR_PLAY,3,4,{NULL},S_PLAY_RUN1,0,0},  // S_PLAY_RUN4
[154]     {SPR_PLAY,4,12,{NULL},S_PLAY,0,0},  // S_PLAY_ATK1
[155]     {SPR_PLAY,32773,6,{NULL},S_PLAY_ATK1,0,0},  // S_PLAY_ATK2
[156]     {SPR_PLAY,6,4,{NULL},S_PLAY_PAIN2,0,0}, // S_PLAY_PAIN
[157]     {SPR_PLAY,6,4,{A_Pain},S_PLAY,0,0}, // S_PLAY_PAIN2
[158]     {SPR_PLAY,7,10,{NULL},S_PLAY_DIE2,0,0}, // S_PLAY_DIE1
[159]     {SPR_PLAY,8,10,{A_PlayerScream},S_PLAY_DIE3,0,0}, // S_PLAY_DIE2
[160]     {SPR_PLAY,9,10,{A_Fall},S_PLAY_DIE4,0,0}, // S_PLAY_DIE3
[161]     {SPR_PLAY,10,10,{NULL},S_PLAY_DIE5,0,0},  // S_PLAY_DIE4
[162]     {SPR_PLAY,11,10,{NULL},S_PLAY_DIE6,0,0},  // S_PLAY_DIE5
[163]     {SPR_PLAY,12,10,{NULL},S_PLAY_DIE7,0,0},  // S_PLAY_DIE6
[164]     {SPR_PLAY,13,-1,{NULL},S_NULL,0,0}, // S_PLAY_DIE7
[165]     {SPR_PLAY,14,5,{NULL},S_PLAY_XDIE2,0,0},  // S_PLAY_XDIE1
[166]     {SPR_PLAY,15,5,{A_XScream},S_PLAY_XDIE3,0,0}, // S_PLAY_XDIE2
[167]     {SPR_PLAY,16,5,{A_Fall},S_PLAY_XDIE4,0,0},  // S_PLAY_XDIE3
[168]     {SPR_PLAY,17,5,{NULL},S_PLAY_XDIE5,0,0},  // S_PLAY_XDIE4
[169]     {SPR_PLAY,18,5,{NULL},S_PLAY_XDIE6,0,0},  // S_PLAY_XDIE5
[170]     {SPR_PLAY,19,5,{NULL},S_PLAY_XDIE7,0,0},  // S_PLAY_XDIE6
[171]     {SPR_PLAY,20,5,{NULL},S_PLAY_XDIE8,0,0},  // S_PLAY_XDIE7
[172]     {SPR_PLAY,21,5,{NULL},S_PLAY_XDIE9,0,0},  // S_PLAY_XDIE8
[173]     {SPR_PLAY,22,-1,{NULL},S_NULL,0,0}, // S_PLAY_XDIE9
[174]     {SPR_POSS,0,10,{A_Look},S_POSS_STND2,0,0},  // S_POSS_STND
[175]     {SPR_POSS,1,10,{A_Look},S_POSS_STND,0,0}, // S_POSS_STND2
[176]     {SPR_POSS,0,4,{A_Chase},S_POSS_RUN2,0,0}, // S_POSS_RUN1
[177]     {SPR_POSS,0,4,{A_Chase},S_POSS_RUN3,0,0}, // S_POSS_RUN2
[178]     {SPR_POSS,1,4,{A_Chase},S_POSS_RUN4,0,0}, // S_POSS_RUN3
[179]     {SPR_POSS,1,4,{A_Chase},S_POSS_RUN5,0,0}, // S_POSS_RUN4
[180]     {SPR_POSS,2,4,{A_Chase},S_POSS_RUN6,0,0}, // S_POSS_RUN5
[181]     {SPR_POSS,2,4,{A_Chase},S_POSS_RUN7,0,0}, // S_POSS_RUN6
[182]     {SPR_POSS,3,4,{A_Chase},S_POSS_RUN8,0,0}, // S_POSS_RUN7
[183]     {SPR_POSS,3,4,{A_Chase},S_POSS_RUN1,0,0}, // S_POSS_RUN8
[184]     {SPR_POSS,4,10,{A_FaceTarget},S_POSS_ATK2,0,0}, // S_POSS_ATK1
[185]     {SPR_POSS,5,8,{A_PosAttack},S_POSS_ATK3,0,0}, // S_POSS_ATK2
[186]     {SPR_POSS,4,8,{NULL},S_POSS_RUN1,0,0},  // S_POSS_ATK3
[187]     {SPR_POSS,6,3,{NULL},S_POSS_PAIN2,0,0}, // S_POSS_PAIN
[188]     {SPR_POSS,6,3,{A_Pain},S_POSS_RUN1,0,0},  // S_POSS_PAIN2
[189]     {SPR_POSS,7,5,{NULL},S_POSS_DIE2,0,0},  // S_POSS_DIE1
[190]     {SPR_POSS,8,5,{A_Scream},S_POSS_DIE3,0,0},  // S_POSS_DIE2
[191]     {SPR_POSS,9,5,{A_Fall},S_POSS_DIE4,0,0},  // S_POSS_DIE3
[192]     {SPR_POSS,10,5,{NULL},S_POSS_DIE5,0,0}, // S_POSS_DIE4
[193]     {SPR_POSS,11,-1,{NULL},S_NULL,0,0}, // S_POSS_DIE5
[194]     {SPR_POSS,12,5,{NULL},S_POSS_XDIE2,0,0},  // S_POSS_XDIE1
[195]     {SPR_POSS,13,5,{A_XScream},S_POSS_XDIE3,0,0}, // S_POSS_XDIE2
[196]     {SPR_POSS,14,5,{A_Fall},S_POSS_XDIE4,0,0},  // S_POSS_XDIE3
[197]     {SPR_POSS,15,5,{NULL},S_POSS_XDIE5,0,0},  // S_POSS_XDIE4
[198]     {SPR_POSS,16,5,{NULL},S_POSS_XDIE6,0,0},  // S_POSS_XDIE5
[199]     {SPR_POSS,17,5,{NULL},S_POSS_XDIE7,0,0},  // S_POSS_XDIE6
[200]     {SPR_POSS,18,5,{NULL},S_POSS_XDIE8,0,0},  // S_POSS_XDIE7
[201]     {SPR_POSS,19,5,{NULL},S_POSS_XDIE9,0,0},  // S_POSS_XDIE8
[202]     {SPR_POSS,20,-1,{NULL},S_NULL,0,0}, // S_POSS_XDIE9
[203]     {SPR_POSS,10,5,{NULL},S_POSS_RAISE2,0,0}, // S_POSS_RAISE1
[204]     {SPR_POSS,9,5,{NULL},S_POSS_RAISE3,0,0},  // S_POSS_RAISE2
[205]     {SPR_POSS,8,5,{NULL},S_POSS_RAISE4,0,0},  // S_POSS_RAISE3
[206]     {SPR_POSS,7,5,{NULL},S_POSS_RUN1,0,0},  // S_POSS_RAISE4
[207]     {SPR_SPOS,0,10,{A_Look},S_SPOS_STND2,0,0},  // S_SPOS_STND
[208]     {SPR_SPOS,1,10,{A_Look},S_SPOS_STND,0,0}, // S_SPOS_STND2
[209]     {SPR_SPOS,0,3,{A_Chase},S_SPOS_RUN2,0,0}, // S_SPOS_RUN1
[210]     {SPR_SPOS,0,3,{A_Chase},S_SPOS_RUN3,0,0}, // S_SPOS_RUN2
[211]     {SPR_SPOS,1,3,{A_Chase},S_SPOS_RUN4,0,0}, // S_SPOS_RUN3
[212]     {SPR_SPOS,1,3,{A_Chase},S_SPOS_RUN5,0,0}, // S_SPOS_RUN4
[213]     {SPR_SPOS,2,3,{A_Chase},S_SPOS_RUN6,0,0}, // S_SPOS_RUN5
[214]     {SPR_SPOS,2,3,{A_Chase},S_SPOS_RUN7,0,0}, // S_SPOS_RUN6
[215]     {SPR_SPOS,3,3,{A_Chase},S_SPOS_RUN8,0,0}, // S_SPOS_RUN7
[216]     {SPR_SPOS,3,3,{A_Chase},S_SPOS_RUN1,0,0}, // S_SPOS_RUN8
[217]     {SPR_SPOS,4,10,{A_FaceTarget},S_SPOS_ATK2,0,0}, // S_SPOS_ATK1
[218]     {SPR_SPOS,32773,10,{A_SPosAttack},S_SPOS_ATK3,0,0}, // S_SPOS_ATK2
[219]     {SPR_SPOS,4,10,{NULL},S_SPOS_RUN1,0,0}, // S_SPOS_ATK3
[220]     {SPR_SPOS,6,3,{NULL},S_SPOS_PAIN2,0,0}, // S_SPOS_PAIN
[221]     {SPR_SPOS,6,3,{A_Pain},S_SPOS_RUN1,0,0},  // S_SPOS_PAIN2
[222]     {SPR_SPOS,7,5,{NULL},S_SPOS_DIE2,0,0},  // S_SPOS_DIE1
[223]     {SPR_SPOS,8,5,{A_Scream},S_SPOS_DIE3,0,0},  // S_SPOS_DIE2
[224]     {SPR_SPOS,9,5,{A_Fall},S_SPOS_DIE4,0,0},  // S_SPOS_DIE3
[225]     {SPR_SPOS,10,5,{NULL},S_SPOS_DIE5,0,0}, // S_SPOS_DIE4
[226]     {SPR_SPOS,11,-1,{NULL},S_NULL,0,0}, // S_SPOS_DIE5
[227]     {SPR_SPOS,12,5,{NULL},S_SPOS_XDIE2,0,0},  // S_SPOS_XDIE1
[228]     {SPR_SPOS,13,5,{A_XScream},S_SPOS_XDIE3,0,0}, // S_SPOS_XDIE2
[229]     {SPR_SPOS,14,5,{A_Fall},S_SPOS_XDIE4,0,0},  // S_SPOS_XDIE3
[230]     {SPR_SPOS,15,5,{NULL},S_SPOS_XDIE5,0,0},  // S_SPOS_XDIE4
[231]     {SPR_SPOS,16,5,{NULL},S_SPOS_XDIE6,0,0},  // S_SPOS_XDIE5
[232]     {SPR_SPOS,17,5,{NULL},S_SPOS_XDIE7,0,0},  // S_SPOS_XDIE6
[233]     {SPR_SPOS,18,5,{NULL},S_SPOS_XDIE8,0,0},  // S_SPOS_XDIE7
[234]     {SPR_SPOS,19,5,{NULL},S_SPOS_XDIE9,0,0},  // S_SPOS_XDIE8
[235]     {SPR_SPOS,20,-1,{NULL},S_NULL,0,0}, // S_SPOS_XDIE9
[236]     {SPR_SPOS,11,5,{NULL},S_SPOS_RAISE2,0,0}, // S_SPOS_RAISE1
[237]     {SPR_SPOS,10,5,{NULL},S_SPOS_RAISE3,0,0}, // S_SPOS_RAISE2
[238]     {SPR_SPOS,9,5,{NULL},S_SPOS_RAISE4,0,0},  // S_SPOS_RAISE3
[239]     {SPR_SPOS,8,5,{NULL},S_SPOS_RAISE5,0,0},  // S_SPOS_RAISE4
[240]     {SPR_SPOS,7,5,{NULL},S_SPOS_RUN1,0,0},  // S_SPOS_RAISE5
[241]     {SPR_VILE,0,10,{A_Look},S_VILE_STND2,0,0},  // S_VILE_STND
[242]     {SPR_VILE,1,10,{A_Look},S_VILE_STND,0,0}, // S_VILE_STND2
[243]     {SPR_VILE,0,2,{A_VileChase},S_VILE_RUN2,0,0}, // S_VILE_RUN1
[244]     {SPR_VILE,0,2,{A_VileChase},S_VILE_RUN3,0,0}, // S_VILE_RUN2
[245]     {SPR_VILE,1,2,{A_VileChase},S_VILE_RUN4,0,0}, // S_VILE_RUN3
[246]     {SPR_VILE,1,2,{A_VileChase},S_VILE_RUN5,0,0}, // S_VILE_RUN4
[247]     {SPR_VILE,2,2,{A_VileChase},S_VILE_RUN6,0,0}, // S_VILE_RUN5
[248]     {SPR_VILE,2,2,{A_VileChase},S_VILE_RUN7,0,0}, // S_VILE_RUN6
[249]     {SPR_VILE,3,2,{A_VileChase},S_VILE_RUN8,0,0}, // S_VILE_RUN7
[250]     {SPR_VILE,3,2,{A_VileChase},S_VILE_RUN9,0,0}, // S_VILE_RUN8
[251]     {SPR_VILE,4,2,{A_VileChase},S_VILE_RUN10,0,0},  // S_VILE_RUN9
[252]     {SPR_VILE,4,2,{A_VileChase},S_VILE_RUN11,0,0},  // S_VILE_RUN10
[253]     {SPR_VILE,5,2,{A_VileChase},S_VILE_RUN12,0,0},  // S_VILE_RUN11
[254]     {SPR_VILE,5,2,{A_VileChase},S_VILE_RUN1,0,0}, // S_VILE_RUN12
[255]     {SPR_VILE,32774,0,{A_VileStart},S_VILE_ATK2,0,0}, // S_VILE_ATK1
[256]     {SPR_VILE,32774,10,{A_FaceTarget},S_VILE_ATK3,0,0}, // S_VILE_ATK2
[257]     {SPR_VILE,32775,8,{A_VileTarget},S_VILE_ATK4,0,0},  // S_VILE_ATK3
[258]     {SPR_VILE,32776,8,{A_FaceTarget},S_VILE_ATK5,0,0},  // S_VILE_ATK4
[259]     {SPR_VILE,32777,8,{A_FaceTarget},S_VILE_ATK6,0,0},  // S_VILE_ATK5
[260]     {SPR_VILE,32778,8,{A_FaceTarget},S_VILE_ATK7,0,0},  // S_VILE_ATK6
[261]     {SPR_VILE,32779,8,{A_FaceTarget},S_VILE_ATK8,0,0},  // S_VILE_ATK7
[262]     {SPR_VILE,32780,8,{A_FaceTarget},S_VILE_ATK9,0,0},  // S_VILE_ATK8
[263]     {SPR_VILE,32781,8,{A_FaceTarget},S_VILE_ATK10,0,0}, // S_VILE_ATK9
[264]     {SPR_VILE,32782,8,{A_VileAttack},S_VILE_ATK11,0,0}, // S_VILE_ATK10
[265]     {SPR_VILE,32783,20,{NULL},S_VILE_RUN1,0,0}, // S_VILE_ATK11
[266]     {SPR_VILE,32794,10,{NULL},S_VILE_HEAL2,0,0},  // S_VILE_HEAL1
[267]     {SPR_VILE,32795,10,{NULL},S_VILE_HEAL3,0,0},  // S_VILE_HEAL2
[268]     {SPR_VILE,32796,10,{NULL},S_VILE_RUN1,0,0}, // S_VILE_HEAL3
[269]     {SPR_VILE,16,5,{NULL},S_VILE_PAIN2,0,0},  // S_VILE_PAIN
[270]     {SPR_VILE,16,5,{A_Pain},S_VILE_RUN1,0,0}, // S_VILE_PAIN2
[271]     {SPR_VILE,16,7,{NULL},S_VILE_DIE2,0,0}, // S_VILE_DIE1
[272]     {SPR_VILE,17,7,{A_Scream},S_VILE_DIE3,0,0},  // S_VILE_DIE2
[273]     {SPR_VILE,18,7,{A_Fall},S_VILE_DIE4,0,0}, // S_VILE_DIE3
[274]     {SPR_VILE,19,7,{NULL},S_VILE_DIE5,0,0}, // S_VILE_DIE4
[275]     {SPR_VILE,20,7,{NULL},S_VILE_DIE6,0,0}, // S_VILE_DIE5
[276]     {SPR_VILE,21,7,{NULL},S_VILE_DIE7,0,0}, // S_VILE_DIE6
[277]     {SPR_VILE,22,7,{NULL},S_VILE_DIE8,0,0}, // S_VILE_DIE7
[278]     {SPR_VILE,23,5,{NULL},S_VILE_DIE9,0,0}, // S_VILE_DIE8
[279]     {SPR_VILE,24,5,{NULL},S_VILE_DIE10,0,0},  // S_VILE_DIE9
[280]     {SPR_VILE,25,-1,{NULL},S_NULL,0,0}, // S_VILE_DIE10
[281]     {SPR_FIRE,32768,2,{A_StartFire},S_FIRE2,0,0}, // S_FIRE1
[282]     {SPR_FIRE,32769,2,{A_Fire},S_FIRE3,0,0},  // S_FIRE2
[283]     {SPR_FIRE,32768,2,{A_Fire},S_FIRE4,0,0},  // S_FIRE3
[284]     {SPR_FIRE,32769,2,{A_Fire},S_FIRE5,0,0},  // S_FIRE4
[285]     {SPR_FIRE,32770,2,{A_FireCrackle},S_FIRE6,0,0}, // S_FIRE5
[286]     {SPR_FIRE,32769,2,{A_Fire},S_FIRE7,0,0},  // S_FIRE6
[287]     {SPR_FIRE,32770,2,{A_Fire},S_FIRE8,0,0},  // S_FIRE7
[288]     {SPR_FIRE,32769,2,{A_Fire},S_FIRE9,0,0},  // S_FIRE8
[289]     {SPR_FIRE,32770,2,{A_Fire},S_FIRE10,0,0}, // S_FIRE9
[290]     {SPR_FIRE,32771,2,{A_Fire},S_FIRE11,0,0}, // S_FIRE10
[291]     {SPR_FIRE,32770,2,{A_Fire},S_FIRE12,0,0}, // S_FIRE11
[292]     {SPR_FIRE,32771,2,{A_Fire},S_FIRE13,0,0}, // S_FIRE12
[293]     {SPR_FIRE,32770,2,{A_Fire},S_FIRE14,0,0}, // S_FIRE13
[294]     {SPR_FIRE,32771,2,{A_Fire},S_FIRE15,0,0}, // S_FIRE14
[295]     {SPR_FIRE,32772,2,{A_Fire},S_FIRE16,0,0}, // S_FIRE15
[296]     {SPR_FIRE,32771,2,{A_Fire},S_FIRE17,0,0}, // S_FIRE16
[297]     {SPR_FIRE,32772,2,{A_Fire},S_FIRE18,0,0}, // S_FIRE17
[298]     {SPR_FIRE,32771,2,{A_Fire},S_FIRE19,0,0}, // S_FIRE18
[299]     {SPR_FIRE,32772,2,{A_FireCrackle},S_FIRE20,0,0},  // S_FIRE19
[300]     {SPR_FIRE,32773,2,{A_Fire},S_FIRE21,0,0}, // S_FIRE20
[301]     {SPR_FIRE,32772,2,{A_Fire},S_FIRE22,0,0}, // S_FIRE21
[302]     {SPR_FIRE,32773,2,{A_Fire},S_FIRE23,0,0}, // S_FIRE22
[303]     {SPR_FIRE,32772,2,{A_Fire},S_FIRE24,0,0}, // S_FIRE23
[304]     {SPR_FIRE,32773,2,{A_Fire},S_FIRE25,0,0}, // S_FIRE24
[305]     {SPR_FIRE,32774,2,{A_Fire},S_FIRE26,0,0}, // S_FIRE25
[306]     {SPR_FIRE,32775,2,{A_Fire},S_FIRE27,0,0}, // S_FIRE26
[307]     {SPR_FIRE,32774,2,{A_Fire},S_FIRE28,0,0}, // S_FIRE27
[308]     {SPR_FIRE,32775,2,{A_Fire},S_FIRE29,0,0}, // S_FIRE28
[309]     {SPR_FIRE,32774,2,{A_Fire},S_FIRE30,0,0}, // S_FIRE29
[310]     {SPR_FIRE,32775,2,{A_Fire},S_NULL,0,0}, // S_FIRE30
[311]     {SPR_PUFF,1,4,{NULL},S_SMOKE2,0,0}, // S_SMOKE1
[312]     {SPR_PUFF,2,4,{NULL},S_SMOKE3,0,0}, // S_SMOKE2
[313]     {SPR_PUFF,1,4,{NULL},S_SMOKE4,0,0}, // S_SMOKE3
[314]     {SPR_PUFF,2,4,{NULL},S_SMOKE5,0,0}, // S_SMOKE4
[315]     {SPR_PUFF,3,4,{NULL},S_NULL,0,0}, // S_SMOKE5
[316]     {SPR_FATB,32768,2,{A_Tracer},S_TRACER2,0,0},  // S_TRACER
[317]     {SPR_FATB,32769,2,{A_Tracer},S_TRACER,0,0}, // S_TRACER2
[318]     {SPR_FBXP,32768,8,{NULL},S_TRACEEXP2,0,0},  // S_TRACEEXP1
[319]     {SPR_FBXP,32769,6,{NULL},S_TRACEEXP3,0,0},  // S_TRACEEXP2
[320]     {SPR_FBXP,32770,4,{NULL},S_NULL,0,0}, // S_TRACEEXP3
[321]     {SPR_SKEL,0,10,{A_Look},S_SKEL_STND2,0,0},  // S_SKEL_STND
[322]     {SPR_SKEL,1,10,{A_Look},S_SKEL_STND,0,0}, // S_SKEL_STND2
[323]     {SPR_SKEL,0,2,{A_Chase},S_SKEL_RUN2,0,0}, // S_SKEL_RUN1
[324]     {SPR_SKEL,0,2,{A_Chase},S_SKEL_RUN3,0,0}, // S_SKEL_RUN2
[325]     {SPR_SKEL,1,2,{A_Chase},S_SKEL_RUN4,0,0}, // S_SKEL_RUN3
[326]     {SPR_SKEL,1,2,{A_Chase},S_SKEL_RUN5,0,0}, // S_SKEL_RUN4
[327]     {SPR_SKEL,2,2,{A_Chase},S_SKEL_RUN6,0,0}, // S_SKEL_RUN5
[328]     {SPR_SKEL,2,2,{A_Chase},S_SKEL_RUN7,0,0}, // S_SKEL_RUN6
[329]     {SPR_SKEL,3,2,{A_Chase},S_SKEL_RUN8,0,0}, // S_SKEL_RUN7
[330]     {SPR_SKEL,3,2,{A_Chase},S_SKEL_RUN9,0,0}, // S_SKEL_RUN8
[331]     {SPR_SKEL,4,2,{A_Chase},S_SKEL_RUN10,0,0},  // S_SKEL_RUN9
[332]     {SPR_SKEL,4,2,{A_Chase},S_SKEL_RUN11,0,0},  // S_SKEL_RUN10
[333]     {SPR_SKEL,5,2,{A_Chase},S_SKEL_RUN12,0,0},  // S_SKEL_RUN11
[334]     {SPR_SKEL,5,2,{A_Chase},S_SKEL_RUN1,0,0}, // S_SKEL_RUN12
[335]     {SPR_SKEL,6,0,{A_FaceTarget},S_SKEL_FIST2,0,0}, // S_SKEL_FIST1
[336]     {SPR_SKEL,6,6,{A_SkelWhoosh},S_SKEL_FIST3,0,0}, // S_SKEL_FIST2
[337]     {SPR_SKEL,7,6,{A_FaceTarget},S_SKEL_FIST4,0,0}, // S_SKEL_FIST3
[338]     {SPR_SKEL,8,6,{A_SkelFist},S_SKEL_RUN1,0,0},  // S_SKEL_FIST4
[339]     {SPR_SKEL,32777,0,{A_FaceTarget},S_SKEL_MISS2,0,0}, // S_SKEL_MISS1
[340]     {SPR_SKEL,32777,10,{A_FaceTarget},S_SKEL_MISS3,0,0},  // S_SKEL_MISS2
[341]     {SPR_SKEL,10,10,{A_SkelMissile},S_SKEL_MISS4,0,0},  // S_SKEL_MISS3
[342]     {SPR_SKEL,10,10,{A_FaceTarget},S_SKEL_RUN1,0,0},  // S_SKEL_MISS4
[343]     {SPR_SKEL,11,5,{NULL},S_SKEL_PAIN2,0,0},  // S_SKEL_PAIN
[344]     {SPR_SKEL,11,5,{A_Pain},S_SKEL_RUN1,0,0}, // S_SKEL_PAIN2
[345]     {SPR_SKEL,11,7,{NULL},S_SKEL_DIE2,0,0}, // S_SKEL_DIE1
[346]     {SPR_SKEL,12,7,{NULL},S_SKEL_DIE3,0,0}, // S_SKEL_DIE2
[347]     {SPR_SKEL,13,7,{A_Scream},S_SKEL_DIE4,0,0}, // S_SKEL_DIE3
[348]     {SPR_SKEL,14,7,{A_Fall},S_SKEL_DIE5,0,0}, // S_SKEL_DIE4
[349]     {SPR_SKEL,15,7,{NULL},S_SKEL_DIE6,0,0}, // S_SKEL_DIE5
[350]     {SPR_SKEL,16,-1,{NULL},S_NULL,0,0}, // S_SKEL_DIE6
[351]     {SPR_SKEL,16,5,{NULL},S_SKEL_RAISE2,0,0}, // S_SKEL_RAISE1
[352]     {SPR_SKEL,15,5,{NULL},S_SKEL_RAISE3,0,0}, // S_SKEL_RAISE2
[353]     {SPR_SKEL,14,5,{NULL},S_SKEL_RAISE4,0,0}, // S_SKEL_RAISE3
[354]     {SPR_SKEL,13,5,{NULL},S_SKEL_RAISE5,0,0}, // S_SKEL_RAISE4
[355]     {SPR_SKEL,12,5,{NULL},S_SKEL_RAISE6,0,0}, // S_SKEL_RAISE5
[356]     {SPR_SKEL,11,5,{NULL},S_SKEL_RUN1,0,0}, // S_SKEL_RAISE6
[357]     {SPR_MANF,32768,4,{NULL},S_FATSHOT2,0,0}, // S_FATSHOT1
[358]     {SPR_MANF,32769,4,{NULL},S_FATSHOT1,0,0}, // S_FATSHOT2
[359]     {SPR_MISL,32769,8,{NULL},S_FATSHOTX2,0,0},  // S_FATSHOTX1
[360]     {SPR_MISL,32770,6,{NULL},S_FATSHOTX3,0,0},  // S_FATSHOTX2
[361]     {SPR_MISL,32771,4,{NULL},S_NULL,0,0}, // S_FATSHOTX3
[362]     {SPR_FATT,0,15,{A_Look},S_FATT_STND2,0,0},  // S_FATT_STND
[363]     {SPR_FATT,1,15,{A_Look},S_FATT_STND,0,0}, // S_FATT_STND2
[364]     {SPR_FATT,0,4,{A_Chase},S_FATT_RUN2,0,0}, // S_FATT_RUN1
[365]     {SPR_FATT,0,4,{A_Chase},S_FATT_RUN3,0,0}, // S_FATT_RUN2
[366]     {SPR_FATT,1,4,{A_Chase},S_FATT_RUN4,0,0}, // S_FATT_RUN3
[367]     {SPR_FATT,1,4,{A_Chase},S_FATT_RUN5,0,0}, // S_FATT_RUN4
[368]     {SPR_FATT,2,4,{A_Chase},S_FATT_RUN6,0,0}, // S_FATT_RUN5
[369]     {SPR_FATT,2,4,{A_Chase},S_FATT_RUN7,0,0}, // S_FATT_RUN6
[370]     {SPR_FATT,3,4,{A_Chase},S_FATT_RUN8,0,0}, // S_FATT_RUN7
[371]     {SPR_FATT,3,4,{A_Chase},S_FATT_RUN9,0,0}, // S_FATT_RUN8
[372]     {SPR_FATT,4,4,{A_Chase},S_FATT_RUN10,0,0},  // S_FATT_RUN9
[373]     {SPR_FATT,4,4,{A_Chase},S_FATT_RUN11,0,0},  // S_FATT_RUN10
[374]     {SPR_FATT,5,4,{A_Chase},S_FATT_RUN12,0,0},  // S_FATT_RUN11
[375]     {SPR_FATT,5,4,{A_Chase},S_FATT_RUN1,0,0}, // S_FATT_RUN12
[376]     {SPR_FATT,6,20,{A_FatRaise},S_FATT_ATK2,0,0}, // S_FATT_ATK1
[377]     {SPR_FATT,32775,10,{A_FatAttack1},S_FATT_ATK3,0,0}, // S_FATT_ATK2
[378]     {SPR_FATT,8,5,{A_FaceTarget},S_FATT_ATK4,0,0},  // S_FATT_ATK3
[379]     {SPR_FATT,6,5,{A_FaceTarget},S_FATT_ATK5,0,0},  // S_FATT_ATK4
[380]     {SPR_FATT,32775,10,{A_FatAttack2},S_FATT_ATK6,0,0}, // S_FATT_ATK5
[381]     {SPR_FATT,8,5,{A_FaceTarget},S_FATT_ATK7,0,0},  // S_FATT_ATK6
[382]     {SPR_FATT,6,5,{A_FaceTarget},S_FATT_ATK8,0,0},  // S_FATT_ATK7
[383]     {SPR_FATT,32775,10,{A_FatAttack3},S_FATT_ATK9,0,0}, // S_FATT_ATK8
[384]     {SPR_FATT,8,5,{A_FaceTarget},S_FATT_ATK10,0,0}, // S_FATT_ATK9
[385]     {SPR_FATT,6,5,{A_FaceTarget},S_FATT_RUN1,0,0},  // S_FATT_ATK10
[386]     {SPR_FATT,9,3,{NULL},S_FATT_PAIN2,0,0}, // S_FATT_PAIN
[387]     {SPR_FATT,9,3,{A_Pain},S_FATT_RUN1,0,0},  // S_FATT_PAIN2
[388]     {SPR_FATT,10,6,{NULL},S_FATT_DIE2,0,0}, // S_FATT_DIE1
[389]     {SPR_FATT,11,6,{A_Scream},S_FATT_DIE3,0,0}, // S_FATT_DIE2
[390]     {SPR_FATT,12,6,{A_Fall},S_FATT_DIE4,0,0}, // S_FATT_DIE3
[391]     {SPR_FATT,13,6,{NULL},S_FATT_DIE5,0,0}, // S_FATT_DIE4
[392]     {SPR_FATT,14,6,{NULL},S_FATT_DIE6,0,0}, // S_FATT_DIE5
[393]     {SPR_FATT,15,6,{NULL},S_FATT_DIE7,0,0}, // S_FATT_DIE6
[394]     {SPR_FATT,16,6,{NULL},S_FATT_DIE8,0,0}, // S_FATT_DIE7
[395]     {SPR_FATT,17,6,{NULL},S_FATT_DIE9,0,0}, // S_FATT_DIE8
[396]     {SPR_FATT,18,6,{NULL},S_FATT_DIE10,0,0},  // S_FATT_DIE9
[397]     {SPR_FATT,19,-1,{A_BossDeath},S_NULL,0,0},  // S_FATT_DIE10
[398]     {SPR_FATT,17,5,{NULL},S_FATT_RAISE2,0,0}, // S_FATT_RAISE1
[399]     {SPR_FATT,16,5,{NULL},S_FATT_RAISE3,0,0}, // S_FATT_RAISE2
[400]     {SPR_FATT,15,5,{NULL},S_FATT_RAISE4,0,0}, // S_FATT_RAISE3
[401]     {SPR_FATT,14,5,{NULL},S_FATT_RAISE5,0,0}, // S_FATT_RAISE4
[402]     {SPR_FATT,13,5,{NULL},S_FATT_RAISE6,0,0}, // S_FATT_RAISE5
[403]     {SPR_FATT,12,5,{NULL},S_FATT_RAISE7,0,0}, // S_FATT_RAISE6
[404]     {SPR_FATT,11,5,{NULL},S_FATT_RAISE8,0,0}, // S_FATT_RAISE7
[405]     {SPR_FATT,10,5,{NULL},S_FATT_RUN1,0,0}, // S_FATT_RAISE8
[406]     {SPR_CPOS,0,10,{A_Look},S_CPOS_STND2,0,0},  // S_CPOS_STND
[407]     {SPR_CPOS,1,10,{A_Look},S_CPOS_STND,0,0}, // S_CPOS_STND2
[408]     {SPR_CPOS,0,3,{A_Chase},S_CPOS_RUN2,0,0}, // S_CPOS_RUN1
[409]     {SPR_CPOS,0,3,{A_Chase},S_CPOS_RUN3,0,0}, // S_CPOS_RUN2
[410]     {SPR_CPOS,1,3,{A_Chase},S_CPOS_RUN4,0,0}, // S_CPOS_RUN3
[411]     {SPR_CPOS,1,3,{A_Chase},S_CPOS_RUN5,0,0}, // S_CPOS_RUN4
[412]     {SPR_CPOS,2,3,{A_Chase},S_CPOS_RUN6,0,0}, // S_CPOS_RUN5
[413]     {SPR_CPOS,2,3,{A_Chase},S_CPOS_RUN7,0,0}, // S_CPOS_RUN6
[414]     {SPR_CPOS,3,3,{A_Chase},S_CPOS_RUN8,0,0}, // S_CPOS_RUN7
[415]     {SPR_CPOS,3,3,{A_Chase},S_CPOS_RUN1,0,0}, // S_CPOS_RUN8
[416]     {SPR_CPOS,4,10,{A_FaceTarget},S_CPOS_ATK2,0,0}, // S_CPOS_ATK1
[417]     {SPR_CPOS,32773,4,{A_CPosAttack},S_CPOS_ATK3,0,0},  // S_CPOS_ATK2
[418]     {SPR_CPOS,32772,4,{A_CPosAttack},S_CPOS_ATK4,0,0},  // S_CPOS_ATK3
[419]     {SPR_CPOS,5,1,{A_CPosRefire},S_CPOS_ATK2,0,0},  // S_CPOS_ATK4
[420]     {SPR_CPOS,6,3,{NULL},S_CPOS_PAIN2,0,0}, // S_CPOS_PAIN
[421]     {SPR_CPOS,6,3,{A_Pain},S_CPOS_RUN1,0,0},  // S_CPOS_PAIN2
[422]     {SPR_CPOS,7,5,{NULL},S_CPOS_DIE2,0,0},  // S_CPOS_DIE1
[423]     {SPR_CPOS,8,5,{A_Scream},S_CPOS_DIE3,0,0},  // S_CPOS_DIE2
[424]     {SPR_CPOS,9,5,{A_Fall},S_CPOS_DIE4,0,0},  // S_CPOS_DIE3
[425]     {SPR_CPOS,10,5,{NULL},S_CPOS_DIE5,0,0}, // S_CPOS_DIE4
[426]     {SPR_CPOS,11,5,{NULL},S_CPOS_DIE6,0,0}, // S_CPOS_DIE5
[427]     {SPR_CPOS,12,5,{NULL},S_CPOS_DIE7,0,0}, // S_CPOS_DIE6
[428]     {SPR_CPOS,13,-1,{NULL},S_NULL,0,0}, // S_CPOS_DIE7
[429]     {SPR_CPOS,14,5,{NULL},S_CPOS_XDIE2,0,0},  // S_CPOS_XDIE1
[430]     {SPR_CPOS,15,5,{A_XScream},S_CPOS_XDIE3,0,0}, // S_CPOS_XDIE2
[431]     {SPR_CPOS,16,5,{A_Fall},S_CPOS_XDIE4,0,0},  // S_CPOS_XDIE3
[432]     {SPR_CPOS,17,5,{NULL},S_CPOS_XDIE5,0,0},  // S_CPOS_XDIE4
[433]     {SPR_CPOS,18,5,{NULL},S_CPOS_XDIE6,0,0},  // S_CPOS_XDIE5
[434]     {SPR_CPOS,19,-1,{NULL},S_NULL,0,0}, // S_CPOS_XDIE6
[435]     {SPR_CPOS,13,5,{NULL},S_CPOS_RAISE2,0,0}, // S_CPOS_RAISE1
[436]     {SPR_CPOS,12,5,{NULL},S_CPOS_RAISE3,0,0}, // S_CPOS_RAISE2
[437]     {SPR_CPOS,11,5,{NULL},S_CPOS_RAISE4,0,0}, // S_CPOS_RAISE3
[438]     {SPR_CPOS,10,5,{NULL},S_CPOS_RAISE5,0,0}, // S_CPOS_RAISE4
[439]     {SPR_CPOS,9,5,{NULL},S_CPOS_RAISE6,0,0},  // S_CPOS_RAISE5
[440]     {SPR_CPOS,8,5,{NULL},S_CPOS_RAISE7,0,0},  // S_CPOS_RAISE6
[441]     {SPR_CPOS,7,5,{NULL},S_CPOS_RUN1,0,0},  // S_CPOS_RAISE7
[442]     {SPR_TROO,0,10,{A_Look},S_TROO_STND2,0,0},  // S_TROO_STND
[443]     {SPR_TROO,1,10,{A_Look},S_TROO_STND,0,0}, // S_TROO_STND2
[444]     {SPR_TROO,0,3,{A_Chase},S_TROO_RUN2,0,0}, // S_TROO_RUN1
[445]     {SPR_TROO,0,3,{A_Chase},S_TROO_RUN3,0,0}, // S_TROO_RUN2
[446]     {SPR_TROO,1,3,{A_Chase},S_TROO_RUN4,0,0}, // S_TROO_RUN3
[447]     {SPR_TROO,1,3,{A_Chase},S_TROO_RUN5,0,0}, // S_TROO_RUN4
[448]     {SPR_TROO,2,3,{A_Chase},S_TROO_RUN6,0,0}, // S_TROO_RUN5
[449]     {SPR_TROO,2,3,{A_Chase},S_TROO_RUN7,0,0}, // S_TROO_RUN6
[450]     {SPR_TROO,3,3,{A_Chase},S_TROO_RUN8,0,0}, // S_TROO_RUN7
[451]     {SPR_TROO,3,3,{A_Chase},S_TROO_RUN1,0,0}, // S_TROO_RUN8
[452]     {SPR_TROO,4,8,{A_FaceTarget},S_TROO_ATK2,0,0},  // S_TROO_ATK1
[453]     {SPR_TROO,5,8,{A_FaceTarget},S_TROO_ATK3,0,0},  // S_TROO_ATK2
[454]     {SPR_TROO,6,6,{A_TroopAttack},S_TROO_RUN1,0,0}, // S_TROO_ATK3
[455]     {SPR_TROO,7,2,{NULL},S_TROO_PAIN2,0,0}, // S_TROO_PAIN
[456]     {SPR_TROO,7,2,{A_Pain},S_TROO_RUN1,0,0},  // S_TROO_PAIN2
[457]     {SPR_TROO,8,8,{NULL},S_TROO_DIE2,0,0},  // S_TROO_DIE1
[458]     {SPR_TROO,9,8,{A_Scream},S_TROO_DIE3,0,0},  // S_TROO_DIE2
[459]     {SPR_TROO,10,6,{NULL},S_TROO_DIE4,0,0}, // S_TROO_DIE3
[460]     {SPR_TROO,11,6,{A_Fall},S_TROO_DIE5,0,0}, // S_TROO_DIE4
[461]     {SPR_TROO,12,-1,{NULL},S_NULL,0,0}, // S_TROO_DIE5
[462]     {SPR_TROO,13,5,{NULL},S_TROO_XDIE2,0,0},  // S_TROO_XDIE1
[463]     {SPR_TROO,14,5,{A_XScream},S_TROO_XDIE3,0,0}, // S_TROO_XDIE2
[464]     {SPR_TROO,15,5,{NULL},S_TROO_XDIE4,0,0},  // S_TROO_XDIE3
[465]     {SPR_TROO,16,5,{A_Fall},S_TROO_XDIE5,0,0},  // S_TROO_XDIE4
[466]     {SPR_TROO,17,5,{NULL},S_TROO_XDIE6,0,0},  // S_TROO_XDIE5
[467]     {SPR_TROO,18,5,{NULL},S_TROO_XDIE7,0,0},  // S_TROO_XDIE6
[468]     {SPR_TROO,19,5,{NULL},S_TROO_XDIE8,0,0},  // S_TROO_XDIE7
[469]     {SPR_TROO,20,-1,{NULL},S_NULL,0,0}, // S_TROO_XDIE8
[470]     {SPR_TROO,12,8,{NULL},S_TROO_RAISE2,0,0}, // S_TROO_RAISE1
[471]     {SPR_TROO,11,8,{NULL},S_TROO_RAISE3,0,0}, // S_TROO_RAISE2
[472]     {SPR_TROO,10,6,{NULL},S_TROO_RAISE4,0,0}, // S_TROO_RAISE3
[473]     {SPR_TROO,9,6,{NULL},S_TROO_RAISE5,0,0},  // S_TROO_RAISE4
[474]     {SPR_TROO,8,6,{NULL},S_TROO_RUN1,0,0},  // S_TROO_RAISE5
[475]     {SPR_SARG,0,10,{A_Look},S_SARG_STND2,0,0},  // S_SARG_STND
[476]     {SPR_SARG,1,10,{A_Look},S_SARG_STND,0,0}, // S_SARG_STND2
[477]     {SPR_SARG,0,2,{A_Chase},S_SARG_RUN2,0,0}, // S_SARG_RUN1
[478]     {SPR_SARG,0,2,{A_Chase},S_SARG_RUN3,0,0}, // S_SARG_RUN2
[479]     {SPR_SARG,1,2,{A_Chase},S_SARG_RUN4,0,0}, // S_SARG_RUN3
[480]     {SPR_SARG,1,2,{A_Chase},S_SARG_RUN5,0,0}, // S_SARG_RUN4
[481]     {SPR_SARG,2,2,{A_Chase},S_SARG_RUN6,0,0}, // S_SARG_RUN5
[482]     {SPR_SARG,2,2,{A_Chase},S_SARG_RUN7,0,0}, // S_SARG_RUN6
[483]     {SPR_SARG,3,2,{A_Chase},S_SARG_RUN8,0,0}, // S_SARG_RUN7
[484]     {SPR_SARG,3,2,{A_Chase},S_SARG_RUN1,0,0}, // S_SARG_RUN8
[485]     {SPR_SARG,4,8,{A_FaceTarget},S_SARG_ATK2,0,0},  // S_SARG_ATK1
[486]     {SPR_SARG,5,8,{A_FaceTarget},S_SARG_ATK3,0,0},  // S_SARG_ATK2
[487]     {SPR_SARG,6,8,{A_SargAttack},S_SARG_RUN1,0,0},  // S_SARG_ATK3
[488]     {SPR_SARG,7,2,{NULL},S_SARG_PAIN2,0,0}, // S_SARG_PAIN
[489]     {SPR_SARG,7,2,{A_Pain},S_SARG_RUN1,0,0},  // S_SARG_PAIN2
[490]     {SPR_SARG,8,8,{NULL},S_SARG_DIE2,0,0},  // S_SARG_DIE1
[491]     {SPR_SARG,9,8,{A_Scream},S_SARG_DIE3,0,0},  // S_SARG_DIE2
[492]     {SPR_SARG,10,4,{NULL},S_SARG_DIE4,0,0}, // S_SARG_DIE3
[493]     {SPR_SARG,11,4,{A_Fall},S_SARG_DIE5,0,0}, // S_SARG_DIE4
[494]     {SPR_SARG,12,4,{NULL},S_SARG_DIE6,0,0}, // S_SARG_DIE5
[495]     {SPR_SARG,13,-1,{NULL},S_NULL,0,0}, // S_SARG_DIE6
[496]     {SPR_SARG,13,5,{NULL},S_SARG_RAISE2,0,0}, // S_SARG_RAISE1
[497]     {SPR_SARG,12,5,{NULL},S_SARG_RAISE3,0,0}, // S_SARG_RAISE2
[498]     {SPR_SARG,11,5,{NULL},S_SARG_RAISE4,0,0}, // S_SARG_RAISE3
[499]     {SPR_SARG,10,5,{NULL},S_SARG_RAISE5,0,0}, // S_SARG_RAISE4
[500]     {SPR_SARG,9,5,{NULL},S_SARG_RAISE6,0,0},  // S_SARG_RAISE5
[501]     {SPR_SARG,8,5,{NULL},S_SARG_RUN1,0,0},  // S_SARG_RAISE6
[502]     {SPR_HEAD,0,10,{A_Look},S_HEAD_STND,0,0}, // S_HEAD_STND
[503]     {SPR_HEAD,0,3,{A_Chase},S_HEAD_RUN1,0,0}, // S_HEAD_RUN1
[504]     {SPR_HEAD,1,5,{A_FaceTarget},S_HEAD_ATK2,0,0},  // S_HEAD_ATK1
[505]     {SPR_HEAD,2,5,{A_FaceTarget},S_HEAD_ATK3,0,0},  // S_HEAD_ATK2
[506]     {SPR_HEAD,32771,5,{A_HeadAttack},S_HEAD_RUN1,0,0},  // S_HEAD_ATK3
[507]     {SPR_HEAD,4,3,{NULL},S_HEAD_PAIN2,0,0}, // S_HEAD_PAIN
[508]     {SPR_HEAD,4,3,{A_Pain},S_HEAD_PAIN3,0,0}, // S_HEAD_PAIN2
[509]     {SPR_HEAD,5,6,{NULL},S_HEAD_RUN1,0,0},  // S_HEAD_PAIN3
[510]     {SPR_HEAD,6,8,{NULL},S_HEAD_DIE2,0,0},  // S_HEAD_DIE1
[511]     {SPR_HEAD,7,8,{A_Scream},S_HEAD_DIE3,0,0},  // S_HEAD_DIE2
[512]     {SPR_HEAD,8,8,{NULL},S_HEAD_DIE4,0,0},  // S_HEAD_DIE3
[513]     {SPR_HEAD,9,8,{NULL},S_HEAD_DIE5,0,0},  // S_HEAD_DIE4
[514]     {SPR_HEAD,10,8,{A_Fall},S_HEAD_DIE6,0,0}, // S_HEAD_DIE5
[515]     {SPR_HEAD,11,-1,{NULL},S_NULL,0,0}, // S_HEAD_DIE6
[516]     {SPR_HEAD,11,8,{NULL},S_HEAD_RAISE2,0,0}, // S_HEAD_RAISE1
[517]     {SPR_HEAD,10,8,{NULL},S_HEAD_RAISE3,0,0}, // S_HEAD_RAISE2
[518]     {SPR_HEAD,9,8,{NULL},S_HEAD_RAISE4,0,0},  // S_HEAD_RAISE3
[519]     {SPR_HEAD,8,8,{NULL},S_HEAD_RAISE5,0,0},  // S_HEAD_RAISE4
[520]     {SPR_HEAD,7,8,{NULL},S_HEAD_RAISE6,0,0},  // S_HEAD_RAISE5
[521]     {SPR_HEAD,6,8,{NULL},S_HEAD_RUN1,0,0},  // S_HEAD_RAISE6
[522]     {SPR_BAL7,32768,4,{NULL},S_BRBALL2,0,0},  // S_BRBALL1
[523]     {SPR_BAL7,32769,4,{NULL},S_BRBALL1,0,0},  // S_BRBALL2
[524]     {SPR_BAL7,32770,6,{NULL},S_BRBALLX2,0,0}, // S_BRBALLX1
[525]     {SPR_BAL7,32771,6,{NULL},S_BRBALLX3,0,0}, // S_BRBALLX2
[526]     {SPR_BAL7,32772,6,{NULL},S_NULL,0,0}, // S_BRBALLX3
[527]     {SPR_BOSS,0,10,{A_Look},S_BOSS_STND2,0,0},  // S_BOSS_STND
[528]     {SPR_BOSS,1,10,{A_Look},S_BOSS_STND,0,0}, // S_BOSS_STND2
[529]     {SPR_BOSS,0,3,{A_Chase},S_BOSS_RUN2,0,0}, // S_BOSS_RUN1
[530]     {SPR_BOSS,0,3,{A_Chase},S_BOSS_RUN3,0,0}, // S_BOSS_RUN2
[531]     {SPR_BOSS,1,3,{A_Chase},S_BOSS_RUN4,0,0}, // S_BOSS_RUN3
[532]     {SPR_BOSS,1,3,{A_Chase},S_BOSS_RUN5,0,0}, // S_BOSS_RUN4
[533]     {SPR_BOSS,2,3,{A_Chase},S_BOSS_RUN6,0,0}, // S_BOSS_RUN5
[534]     {SPR_BOSS,2,3,{A_Chase},S_BOSS_RUN7,0,0}, // S_BOSS_RUN6
[535]     {SPR_BOSS,3,3,{A_Chase},S_BOSS_RUN8,0,0}, // S_BOSS_RUN7
[536]     {SPR_BOSS,3,3,{A_Chase},S_BOSS_RUN1,0,0}, // S_BOSS_RUN8
[537]     {SPR_BOSS,4,8,{A_FaceTarget},S_BOSS_ATK2,0,0},  // S_BOSS_ATK1
[538]     {SPR_BOSS,5,8,{A_FaceTarget},S_BOSS_ATK3,0,0},  // S_BOSS_ATK2
[539]     {SPR_BOSS,6,8,{A_BruisAttack},S_BOSS_RUN1,0,0}, // S_BOSS_ATK3
[540]     {SPR_BOSS,7,2,{NULL},S_BOSS_PAIN2,0,0}, // S_BOSS_PAIN
[541]     {SPR_BOSS,7,2,{A_Pain},S_BOSS_RUN1,0,0},  // S_BOSS_PAIN2
[542]     {SPR_BOSS,8,8,{NULL},S_BOSS_DIE2,0,0},  // S_BOSS_DIE1
[543]     {SPR_BOSS,9,8,{A_Scream},S_BOSS_DIE3,0,0},  // S_BOSS_DIE2
[544]     {SPR_BOSS,10,8,{NULL},S_BOSS_DIE4,0,0}, // S_BOSS_DIE3
[545]     {SPR_BOSS,11,8,{A_Fall},S_BOSS_DIE5,0,0}, // S_BOSS_DIE4
[546]     {SPR_BOSS,12,8,{NULL},S_BOSS_DIE6,0,0}, // S_BOSS_DIE5
[547]     {SPR_BOSS,13,8,{NULL},S_BOSS_DIE7,0,0}, // S_BOSS_DIE6
[548]     {SPR_BOSS,14,-1,{A_BossDeath},S_NULL,0,0},  // S_BOSS_DIE7
[549]     {SPR_BOSS,14,8,{NULL},S_BOSS_RAISE2,0,0}, // S_BOSS_RAISE1
[550]     {SPR_BOSS,13,8,{NULL},S_BOSS_RAISE3,0,0}, // S_BOSS_RAISE2
[551]     {SPR_BOSS,12,8,{NULL},S_BOSS_RAISE4,0,0}, // S_BOSS_RAISE3
[552]     {SPR_BOSS,11,8,{NULL},S_BOSS_RAISE5,0,0}, // S_BOSS_RAISE4
[553]     {SPR_BOSS,10,8,{NULL},S_BOSS_RAISE6,0,0}, // S_BOSS_RAISE5
[554]     {SPR_BOSS,9,8,{NULL},S_BOSS_RAISE7,0,0},  // S_BOSS_RAISE6
[555]     {SPR_BOSS,8,8,{NULL},S_BOSS_RUN1,0,0},  // S_BOSS_RAISE7
[556]     {SPR_BOS2,0,10,{A_Look},S_BOS2_STND2,0,0},  // S_BOS2_STND
[557]     {SPR_BOS2,1,10,{A_Look},S_BOS2_STND,0,0}, // S_BOS2_STND2
[558]     {SPR_BOS2,0,3,{A_Chase},S_BOS2_RUN2,0,0}, // S_BOS2_RUN1
[559]     {SPR_BOS2,0,3,{A_Chase},S_BOS2_RUN3,0,0}, // S_BOS2_RUN2
[560]     {SPR_BOS2,1,3,{A_Chase},S_BOS2_RUN4,0,0}, // S_BOS2_RUN3
[561]     {SPR_BOS2,1,3,{A_Chase},S_BOS2_RUN5,0,0}, // S_BOS2_RUN4
[562]     {SPR_BOS2,2,3,{A_Chase},S_BOS2_RUN6,0,0}, // S_BOS2_RUN5
[563]     {SPR_BOS2,2,3,{A_Chase},S_BOS2_RUN7,0,0}, // S_BOS2_RUN6
[564]     {SPR_BOS2,3,3,{A_Chase},S_BOS2_RUN8,0,0}, // S_BOS2_RUN7
[565]     {SPR_BOS2,3,3,{A_Chase},S_BOS2_RUN1,0,0}, // S_BOS2_RUN8
[566]     {SPR_BOS2,4,8,{A_FaceTarget},S_BOS2_ATK2,0,0},  // S_BOS2_ATK1
[567]     {SPR_BOS2,5,8,{A_FaceTarget},S_BOS2_ATK3,0,0},  // S_BOS2_ATK2
[568]     {SPR_BOS2,6,8,{A_BruisAttack},S_BOS2_RUN1,0,0}, // S_BOS2_ATK3
[569]     {SPR_BOS2,7,2,{NULL},S_BOS2_PAIN2,0,0}, // S_BOS2_PAIN
[570]     {SPR_BOS2,7,2,{A_Pain},S_BOS2_RUN1,0,0},  // S_BOS2_PAIN2
[571]     {SPR_BOS2,8,8,{NULL},S_BOS2_DIE2,0,0},  // S_BOS2_DIE1
[572]     {SPR_BOS2,9,8,{A_Scream},S_BOS2_DIE3,0,0},  // S_BOS2_DIE2
[573]     {SPR_BOS2,10,8,{NULL},S_BOS2_DIE4,0,0}, // S_BOS2_DIE3
[574]     {SPR_BOS2,11,8,{A_Fall},S_BOS2_DIE5,0,0}, // S_BOS2_DIE4
[575]     {SPR_BOS2,12,8,{NULL},S_BOS2_DIE6,0,0}, // S_BOS2_DIE5
[576]     {SPR_BOS2,13,8,{NULL},S_BOS2_DIE7,0,0}, // S_BOS2_DIE6
[577]     {SPR_BOS2,14,-1,{NULL},S_NULL,0,0}, // S_BOS2_DIE7
[578]     {SPR_BOS2,14,8,{NULL},S_BOS2_RAISE2,0,0}, // S_BOS2_RAISE1
[579]     {SPR_BOS2,13,8,{NULL},S_BOS2_RAISE3,0,0}, // S_BOS2_RAISE2
[580]     {SPR_BOS2,12,8,{NULL},S_BOS2_RAISE4,0,0}, // S_BOS2_RAISE3
[581]     {SPR_BOS2,11,8,{NULL},S_BOS2_RAISE5,0,0}, // S_BOS2_RAISE4
[582]     {SPR_BOS2,10,8,{NULL},S_BOS2_RAISE6,0,0}, // S_BOS2_RAISE5
[583]     {SPR_BOS2,9,8,{NULL},S_BOS2_RAISE7,0,0},  // S_BOS2_RAISE6
[584]     {SPR_BOS2,8,8,{NULL},S_BOS2_RUN1,0,0},  // S_BOS2_RAISE7
[585]     {SPR_SKUL,32768,10,{A_Look},S_SKULL_STND2,0,0}, // S_SKULL_STND
[586]     {SPR_SKUL,32769,10,{A_Look},S_SKULL_STND,0,0},  // S_SKULL_STND2
[587]     {SPR_SKUL,32768,6,{A_Chase},S_SKULL_RUN2,0,0},  // S_SKULL_RUN1
[588]     {SPR_SKUL,32769,6,{A_Chase},S_SKULL_RUN1,0,0},  // S_SKULL_RUN2
[589]     {SPR_SKUL,32770,10,{A_FaceTarget},S_SKULL_ATK2,0,0},  // S_SKULL_ATK1
[590]     {SPR_SKUL,32771,4,{A_SkullAttack},S_SKULL_ATK3,0,0},  // S_SKULL_ATK2
[591]     {SPR_SKUL,32770,4,{NULL},S_SKULL_ATK4,0,0}, // S_SKULL_ATK3
[592]     {SPR_SKUL,32771,4,{NULL},S_SKULL_ATK3,0,0}, // S_SKULL_ATK4
[593]     {SPR_SKUL,32772,3,{NULL},S_SKULL_PAIN2,0,0},  // S_SKULL_PAIN
[594]     {SPR_SKUL,32772,3,{A_Pain},S_SKULL_RUN1,0,0}, // S_SKULL_PAIN2
[595]     {SPR_SKUL,32773,6,{NULL},S_SKULL_DIE2,0,0}, // S_SKULL_DIE1
[596]     {SPR_SKUL,32774,6,{A_Scream},S_SKULL_DIE3,0,0}, // S_SKULL_DIE2
[597]     {SPR_SKUL,32775,6,{NULL},S_SKULL_DIE4,0,0}, // S_SKULL_DIE3
[598]     {SPR_SKUL,32776,6,{A_Fall},S_SKULL_DIE5,0,0}, // S_SKULL_DIE4
[599]     {SPR_SKUL,9,6,{NULL},S_SKULL_DIE6,0,0}, // S_SKULL_DIE5
[600]     {SPR_SKUL,10,6,{NULL},S_NULL,0,0},  // S_SKULL_DIE6
[601]     {SPR_SPID,0,10,{A_Look},S_SPID_STND2,0,0},  // S_SPID_STND
[602]     {SPR_SPID,1,10,{A_Look},S_SPID_STND,0,0}, // S_SPID_STND2
[603]     {SPR_SPID,0,3,{A_Metal},S_SPID_RUN2,0,0}, // S_SPID_RUN1
[604]     {SPR_SPID,0,3,{A_Chase},S_SPID_RUN3,0,0}, // S_SPID_RUN2
[605]     {SPR_SPID,1,3,{A_Chase},S_SPID_RUN4,0,0}, // S_SPID_RUN3
[606]     {SPR_SPID,1,3,{A_Chase},S_SPID_RUN5,0,0}, // S_SPID_RUN4
[607]     {SPR_SPID,2,3,{A_Metal},S_SPID_RUN6,0,0}, // S_SPID_RUN5
[608]     {SPR_SPID,2,3,{A_Chase},S_SPID_RUN7,0,0}, // S_SPID_RUN6
[609]     {SPR_SPID,3,3,{A_Chase},S_SPID_RUN8,0,0}, // S_SPID_RUN7
[610]     {SPR_SPID,3,3,{A_Chase},S_SPID_RUN9,0,0}, // S_SPID_RUN8
[611]     {SPR_SPID,4,3,{A_Metal},S_SPID_RUN10,0,0},  // S_SPID_RUN9
[612]     {SPR_SPID,4,3,{A_Chase},S_SPID_RUN11,0,0},  // S_SPID_RUN10
[613]     {SPR_SPID,5,3,{A_Chase},S_SPID_RUN12,0,0},  // S_SPID_RUN11
[614]     {SPR_SPID,5,3,{A_Chase},S_SPID_RUN1,0,0}, // S_SPID_RUN12
[615]     {SPR_SPID,32768,20,{A_FaceTarget},S_SPID_ATK2,0,0}, // S_SPID_ATK1
[616]     {SPR_SPID,32774,4,{A_SPosAttack},S_SPID_ATK3,0,0},  // S_SPID_ATK2
[617]     {SPR_SPID,32775,4,{A_SPosAttack},S_SPID_ATK4,0,0},  // S_SPID_ATK3
[618]     {SPR_SPID,32775,1,{A_SpidRefire},S_SPID_ATK2,0,0},  // S_SPID_ATK4
[619]     {SPR_SPID,8,3,{NULL},S_SPID_PAIN2,0,0}, // S_SPID_PAIN
[620]     {SPR_SPID,8,3,{A_Pain},S_SPID_RUN1,0,0},  // S_SPID_PAIN2
[621]     {SPR_SPID,9,20,{A_Scream},S_SPID_DIE2,0,0}, // S_SPID_DIE1
[622]     {SPR_SPID,10,10,{A_Fall},S_SPID_DIE3,0,0},  // S_SPID_DIE2
[623]     {SPR_SPID,11,10,{NULL},S_SPID_DIE4,0,0},  // S_SPID_DIE3
[624]     {SPR_SPID,12,10,{NULL},S_SPID_DIE5,0,0},  // S_SPID_DIE4
[625]     {SPR_SPID,13,10,{NULL},S_SPID_DIE6,0,0},  // S_SPID_DIE5
[626]     {SPR_SPID,14,10,{NULL},S_SPID_DIE7,0,0},  // S_SPID_DIE6
[627]     {SPR_SPID,15,10,{NULL},S_SPID_DIE8,0,0},  // S_SPID_DIE7
[628]     {SPR_SPID,16,10,{NULL},S_SPID_DIE9,0,0},  // S_SPID_DIE8
[629]     {SPR_SPID,17,10,{NULL},S_SPID_DIE10,0,0}, // S_SPID_DIE9
[630]     {SPR_SPID,18,30,{NULL},S_SPID_DIE11,0,0}, // S_SPID_DIE10
[631]     {SPR_SPID,18,-1,{A_BossDeath},S_NULL,0,0},  // S_SPID_DIE11
[632]     {SPR_BSPI,0,10,{A_Look},S_BSPI_STND2,0,0},  // S_BSPI_STND
[633]     {SPR_BSPI,1,10,{A_Look},S_BSPI_STND,0,0}, // S_BSPI_STND2
[634]     {SPR_BSPI,0,20,{NULL},S_BSPI_RUN1,0,0}, // S_BSPI_SIGHT
[635]     {SPR_BSPI,0,3,{A_BabyMetal},S_BSPI_RUN2,0,0}, // S_BSPI_RUN1
[636]     {SPR_BSPI,0,3,{A_Chase},S_BSPI_RUN3,0,0}, // S_BSPI_RUN2
[637]     {SPR_BSPI,1,3,{A_Chase},S_BSPI_RUN4,0,0}, // S_BSPI_RUN3
[638]     {SPR_BSPI,1,3,{A_Chase},S_BSPI_RUN5,0,0}, // S_BSPI_RUN4
[639]     {SPR_BSPI,2,3,{A_Chase},S_BSPI_RUN6,0,0}, // S_BSPI_RUN5
[640]     {SPR_BSPI,2,3,{A_Chase},S_BSPI_RUN7,0,0}, // S_BSPI_RUN6
[641]     {SPR_BSPI,3,3,{A_BabyMetal},S_BSPI_RUN8,0,0}, // S_BSPI_RUN7
[642]     {SPR_BSPI,3,3,{A_Chase},S_BSPI_RUN9,0,0}, // S_BSPI_RUN8
[643]     {SPR_BSPI,4,3,{A_Chase},S_BSPI_RUN10,0,0},  // S_BSPI_RUN9
[644]     {SPR_BSPI,4,3,{A_Chase},S_BSPI_RUN11,0,0},  // S_BSPI_RUN10
[645]     {SPR_BSPI,5,3,{A_Chase},S_BSPI_RUN12,0,0},  // S_BSPI_RUN11
[646]     {SPR_BSPI,5,3,{A_Chase},S_BSPI_RUN1,0,0}, // S_BSPI_RUN12
[647]     {SPR_BSPI,32768,20,{A_FaceTarget},S_BSPI_ATK2,0,0}, // S_BSPI_ATK1
[648]     {SPR_BSPI,32774,4,{A_BspiAttack},S_BSPI_ATK3,0,0},  // S_BSPI_ATK2
[649]     {SPR_BSPI,32775,4,{NULL},S_BSPI_ATK4,0,0},  // S_BSPI_ATK3
[650]     {SPR_BSPI,32775,1,{A_SpidRefire},S_BSPI_ATK2,0,0},  // S_BSPI_ATK4
[651]     {SPR_BSPI,8,3,{NULL},S_BSPI_PAIN2,0,0}, // S_BSPI_PAIN
[652]     {SPR_BSPI,8,3,{A_Pain},S_BSPI_RUN1,0,0},  // S_BSPI_PAIN2
[653]     {SPR_BSPI,9,20,{A_Scream},S_BSPI_DIE2,0,0}, // S_BSPI_DIE1
[654]     {SPR_BSPI,10,7,{A_Fall},S_BSPI_DIE3,0,0}, // S_BSPI_DIE2
[655]     {SPR_BSPI,11,7,{NULL},S_BSPI_DIE4,0,0}, // S_BSPI_DIE3
[656]     {SPR_BSPI,12,7,{NULL},S_BSPI_DIE5,0,0}, // S_BSPI_DIE4
[657]     {SPR_BSPI,13,7,{NULL},S_BSPI_DIE6,0,0}, // S_BSPI_DIE5
[658]     {SPR_BSPI,14,7,{NULL},S_BSPI_DIE7,0,0}, // S_BSPI_DIE6
[659]     {SPR_BSPI,15,-1,{A_BossDeath},S_NULL,0,0},  // S_BSPI_DIE7
[660]     {SPR_BSPI,15,5,{NULL},S_BSPI_RAISE2,0,0}, // S_BSPI_RAISE1
[661]     {SPR_BSPI,14,5,{NULL},S_BSPI_RAISE3,0,0}, // S_BSPI_RAISE2
[662]     {SPR_BSPI,13,5,{NULL},S_BSPI_RAISE4,0,0}, // S_BSPI_RAISE3
[663]     {SPR_BSPI,12,5,{NULL},S_BSPI_RAISE5,0,0}, // S_BSPI_RAISE4
[664]     {SPR_BSPI,11,5,{NULL},S_BSPI_RAISE6,0,0}, // S_BSPI_RAISE5
[665]     {SPR_BSPI,10,5,{NULL},S_BSPI_RAISE7,0,0}, // S_BSPI_RAISE6
[666]     {SPR_BSPI,9,5,{NULL},S_BSPI_RUN1,0,0},  // S_BSPI_RAISE7
[667]     {SPR_APLS,32768,5,{NULL},S_ARACH_PLAZ2,0,0},  // S_ARACH_PLAZ
[668]     {SPR_APLS,32769,5,{NULL},S_ARACH_PLAZ,0,0}, // S_ARACH_PLAZ2
[669]     {SPR_APBX,32768,5,{NULL},S_ARACH_PLEX2,0,0},  // S_ARACH_PLEX
[670]     {SPR_APBX,32769,5,{NULL},S_ARACH_PLEX3,0,0},  // S_ARACH_PLEX2
[671]     {SPR_APBX,32770,5,{NULL},S_ARACH_PLEX4,0,0},  // S_ARACH_PLEX3
[672]     {SPR_APBX,32771,5,{NULL},S_ARACH_PLEX5,0,0},  // S_ARACH_PLEX4
[673]     {SPR_APBX,32772,5,{NULL},S_NULL,0,0}, // S_ARACH_PLEX5
[674]     {SPR_CYBR,0,10,{A_Look},S_CYBER_STND2,0,0}, // S_CYBER_STND
[675]     {SPR_CYBR,1,10,{A_Look},S_CYBER_STND,0,0},  // S_CYBER_STND2
[676]     {SPR_CYBR,0,3,{A_Hoof},S_CYBER_RUN2,0,0}, // S_CYBER_RUN1
[677]     {SPR_CYBR,0,3,{A_Chase},S_CYBER_RUN3,0,0},  // S_CYBER_RUN2
[678]     {SPR_CYBR,1,3,{A_Chase},S_CYBER_RUN4,0,0},  // S_CYBER_RUN3
[679]     {SPR_CYBR,1,3,{A_Chase},S_CYBER_RUN5,0,0},  // S_CYBER_RUN4
[680]     {SPR_CYBR,2,3,{A_Chase},S_CYBER_RUN6,0,0},  // S_CYBER_RUN5
[681]     {SPR_CYBR,2,3,{A_Chase},S_CYBER_RUN7,0,0},  // S_CYBER_RUN6
[682]     {SPR_CYBR,3,3,{A_Metal},S_CYBER_RUN8,0,0},  // S_CYBER_RUN7
[683]     {SPR_CYBR,3,3,{A_Chase},S_CYBER_RUN1,0,0},  // S_CYBER_RUN8
[684]     {SPR_CYBR,4,6,{A_FaceTarget},S_CYBER_ATK2,0,0}, // S_CYBER_ATK1
[685]     {SPR_CYBR,5,12,{A_CyberAttack},S_CYBER_ATK3,0,0}, // S_CYBER_ATK2
[686]     {SPR_CYBR,4,12,{A_FaceTarget},S_CYBER_ATK4,0,0},  // S_CYBER_ATK3
[687]     {SPR_CYBR,5,12,{A_CyberAttack},S_CYBER_ATK5,0,0}, // S_CYBER_ATK4
[688]     {SPR_CYBR,4,12,{A_FaceTarget},S_CYBER_ATK6,0,0},  // S_CYBER_ATK5
[689]     {SPR_CYBR,5,12,{A_CyberAttack},S_CYBER_RUN1,0,0}, // S_CYBER_ATK6
[690]     {SPR_CYBR,6,10,{A_Pain},S_CYBER_RUN1,0,0},  // S_CYBER_PAIN
[691]     {SPR_CYBR,7,10,{NULL},S_CYBER_DIE2,0,0},  // S_CYBER_DIE1
[692]     {SPR_CYBR,8,10,{A_Scream},S_CYBER_DIE3,0,0},  // S_CYBER_DIE2
[693]     {SPR_CYBR,9,10,{NULL},S_CYBER_DIE4,0,0},  // S_CYBER_DIE3
[694]     {SPR_CYBR,10,10,{NULL},S_CYBER_DIE5,0,0}, // S_CYBER_DIE4
[695]     {SPR_CYBR,11,10,{NULL},S_CYBER_DIE6,0,0}, // S_CYBER_DIE5
[696]     {SPR_CYBR,12,10,{A_Fall},S_CYBER_DIE7,0,0}, // S_CYBER_DIE6
[697]     {SPR_CYBR,13,10,{NULL},S_CYBER_DIE8,0,0}, // S_CYBER_DIE7
[698]     {SPR_CYBR,14,10,{NULL},S_CYBER_DIE9,0,0}, // S_CYBER_DIE8
[699]     {SPR_CYBR,15,30,{NULL},S_CYBER_DIE10,0,0},  // S_CYBER_DIE9
[700]     {SPR_CYBR,15,-1,{A_BossDeath},S_NULL,0,0},  // S_CYBER_DIE10
[701]     {SPR_PAIN,0,10,{A_Look},S_PAIN_STND,0,0}, // S_PAIN_STND
[702]     {SPR_PAIN,0,3,{A_Chase},S_PAIN_RUN2,0,0}, // S_PAIN_RUN1
[703]     {SPR_PAIN,0,3,{A_Chase},S_PAIN_RUN3,0,0}, // S_PAIN_RUN2
[704]     {SPR_PAIN,1,3,{A_Chase},S_PAIN_RUN4,0,0}, // S_PAIN_RUN3
[705]     {SPR_PAIN,1,3,{A_Chase},S_PAIN_RUN5,0,0}, // S_PAIN_RUN4
[706]     {SPR_PAIN,2,3,{A_Chase},S_PAIN_RUN6,0,0}, // S_PAIN_RUN5
[707]     {SPR_PAIN,2,3,{A_Chase},S_PAIN_RUN1,0,0}, // S_PAIN_RUN6
[708]     {SPR_PAIN,3,5,{A_FaceTarget},S_PAIN_ATK2,0,0},  // S_PAIN_ATK1
[709]     {SPR_PAIN,4,5,{A_FaceTarget},S_PAIN_ATK3,0,0},  // S_PAIN_ATK2
[710]     {SPR_PAIN,32773,5,{A_FaceTarget},S_PAIN_ATK4,0,0},  // S_PAIN_ATK3
[711]     {SPR_PAIN,32773,0,{A_PainAttack},S_PAIN_RUN1,0,0},  // S_PAIN_ATK4
[712]     {SPR_PAIN,6,6,{NULL},S_PAIN_PAIN2,0,0}, // S_PAIN_PAIN
[713]     {SPR_PAIN,6,6,{A_Pain},S_PAIN_RUN1,0,0},  // S_PAIN_PAIN2
[714]     {SPR_PAIN,32775,8,{NULL},S_PAIN_DIE2,0,0},  // S_PAIN_DIE1
[715]     {SPR_PAIN,32776,8,{A_Scream},S_PAIN_DIE3,0,0},  // S_PAIN_DIE2
[716]     {SPR_PAIN,32777,8,{NULL},S_PAIN_DIE4,0,0},  // S_PAIN_DIE3
[717]     {SPR_PAIN,32778,8,{NULL},S_PAIN_DIE5,0,0},  // S_PAIN_DIE4
[718]     {SPR_PAIN,32779,8,{A_PainDie},S_PAIN_DIE6,0,0}, // S_PAIN_DIE5
[719]     {SPR_PAIN,32780,8,{NULL},S_NULL,0,0}, // S_PAIN_DIE6
[720]     {SPR_PAIN,12,8,{NULL},S_PAIN_RAISE2,0,0}, // S_PAIN_RAISE1
[721]     {SPR_PAIN,11,8,{NULL},S_PAIN_RAISE3,0,0}, // S_PAIN_RAISE2
[722]     {SPR_PAIN,10,8,{NULL},S_PAIN_RAISE4,0,0}, // S_PAIN_RAISE3
[723]     {SPR_PAIN,9,8,{NULL},S_PAIN_RAISE5,0,0},  // S_PAIN_RAISE4
[724]     {SPR_PAIN,8,8,{NULL},S_PAIN_RAISE6,0,0},  // S_PAIN_RAISE5
[725]     {SPR_PAIN,7,8,{NULL},S_PAIN_RUN1,0,0},  // S_PAIN_RAISE6
[726]     {SPR_SSWV,0,10,{A_Look},S_SSWV_STND2,0,0},  // S_SSWV_STND
[727]     {SPR_SSWV,1,10,{A_Look},S_SSWV_STND,0,0}, // S_SSWV_STND2
[728]     {SPR_SSWV,0,3,{A_Chase},S_SSWV_RUN2,0,0}, // S_SSWV_RUN1
[729]     {SPR_SSWV,0,3,{A_Chase},S_SSWV_RUN3,0,0}, // S_SSWV_RUN2
[730]     {SPR_SSWV,1,3,{A_Chase},S_SSWV_RUN4,0,0}, // S_SSWV_RUN3
[731]     {SPR_SSWV,1,3,{A_Chase},S_SSWV_RUN5,0,0}, // S_SSWV_RUN4
[732]     {SPR_SSWV,2,3,{A_Chase},S_SSWV_RUN6,0,0}, // S_SSWV_RUN5
[733]     {SPR_SSWV,2,3,{A_Chase},S_SSWV_RUN7,0,0}, // S_SSWV_RUN6
[734]     {SPR_SSWV,3,3,{A_Chase},S_SSWV_RUN8,0,0}, // S_SSWV_RUN7
[735]     {SPR_SSWV,3,3,{A_Chase},S_SSWV_RUN1,0,0}, // S_SSWV_RUN8
[736]     {SPR_SSWV,4,10,{A_FaceTarget},S_SSWV_ATK2,0,0}, // S_SSWV_ATK1
[737]     {SPR_SSWV,5,10,{A_FaceTarget},S_SSWV_ATK3,0,0}, // S_SSWV_ATK2
[738]     {SPR_SSWV,32774,4,{A_CPosAttack},S_SSWV_ATK4,0,0},  // S_SSWV_ATK3
[739]     {SPR_SSWV,5,6,{A_FaceTarget},S_SSWV_ATK5,0,0},  // S_SSWV_ATK4
[740]     {SPR_SSWV,32774,4,{A_CPosAttack},S_SSWV_ATK6,0,0},  // S_SSWV_ATK5
[741]     {SPR_SSWV,5,1,{A_CPosRefire},S_SSWV_ATK2,0,0},  // S_SSWV_ATK6
[742]     {SPR_SSWV,7,3,{NULL},S_SSWV_PAIN2,0,0}, // S_SSWV_PAIN
[743]     {SPR_SSWV,7,3,{A_Pain},S_SSWV_RUN1,0,0},  // S_SSWV_PAIN2
[744]     {SPR_SSWV,8,5,{NULL},S_SSWV_DIE2,0,0},  // S_SSWV_DIE1
[745]     {SPR_SSWV,9,5,{A_Scream},S_SSWV_DIE3,0,0},  // S_SSWV_DIE2
[746]     {SPR_SSWV,10,5,{A_Fall},S_SSWV_DIE4,0,0}, // S_SSWV_DIE3
[747]     {SPR_SSWV,11,5,{NULL},S_SSWV_DIE5,0,0}, // S_SSWV_DIE4
[748]     {SPR_SSWV,12,-1,{NULL},S_NULL,0,0}, // S_SSWV_DIE5
[749]     {SPR_SSWV,13,5,{NULL},S_SSWV_XDIE2,0,0},  // S_SSWV_XDIE1
[750]     {SPR_SSWV,14,5,{A_XScream},S_SSWV_XDIE3,0,0}, // S_SSWV_XDIE2
[751]     {SPR_SSWV,15,5,{A_Fall},S_SSWV_XDIE4,0,0},  // S_SSWV_XDIE3
[752]     {SPR_SSWV,16,5,{NULL},S_SSWV_XDIE5,0,0},  // S_SSWV_XDIE4
[753]     {SPR_SSWV,17,5,{NULL},S_SSWV_XDIE6,0,0},  // S_SSWV_XDIE5
[754]     {SPR_SSWV,18,5,{NULL},S_SSWV_XDIE7,0,0},  // S_SSWV_XDIE6
[755]     {SPR_SSWV,19,5,{NULL},S_SSWV_XDIE8,0,0},  // S_SSWV_XDIE7
[756]     {SPR_SSWV,20,5,{NULL},S_SSWV_XDIE9,0,0},  // S_SSWV_XDIE8
[757]     {SPR_SSWV,21,-1,{NULL},S_NULL,0,0}, // S_SSWV_XDIE9
[758]     {SPR_SSWV,12,5,{NULL},S_SSWV_RAISE2,0,0}, // S_SSWV_RAISE1
[759]     {SPR_SSWV,11,5,{NULL},S_SSWV_RAISE3,0,0}, // S_SSWV_RAISE2
[760]     {SPR_SSWV,10,5,{NULL},S_SSWV_RAISE4,0,0}, // S_SSWV_RAISE3
[761]     {SPR_SSWV,9,5,{NULL},S_SSWV_RAISE5,0,0},  // S_SSWV_RAISE4
[762]     {SPR_SSWV,8,5,{NULL},S_SSWV_RUN1,0,0},  // S_SSWV_RAISE5
[763]     {SPR_KEEN,0,-1,{NULL},S_KEENSTND,0,0},  // S_KEENSTND
[764]     {SPR_KEEN,0,6,{NULL},S_COMMKEEN2,0,0},  // S_COMMKEEN
[765]     {SPR_KEEN,1,6,{NULL},S_COMMKEEN3,0,0},  // S_COMMKEEN2
[766]     {SPR_KEEN,2,6,{A_Scream},S_COMMKEEN4,0,0},  // S_COMMKEEN3
[767]     {SPR_KEEN,3,6,{NULL},S_COMMKEEN5,0,0},  // S_COMMKEEN4
[768]     {SPR_KEEN,4,6,{NULL},S_COMMKEEN6,0,0},  // S_COMMKEEN5
[769]     {SPR_KEEN,5,6,{NULL},S_COMMKEEN7,0,0},  // S_COMMKEEN6
[770]     {SPR_KEEN,6,6,{NULL},S_COMMKEEN8,0,0},  // S_COMMKEEN7
[771]     {SPR_KEEN,7,6,{NULL},S_COMMKEEN9,0,0},  // S_COMMKEEN8
[772]     {SPR_KEEN,8,6,{NULL},S_COMMKEEN10,0,0}, // S_COMMKEEN9
[773]     {SPR_KEEN,9,6,{NULL},S_COMMKEEN11,0,0}, // S_COMMKEEN10
[774]     {SPR_KEEN,10,6,{A_KeenDie},S_COMMKEEN12,0,0},// S_COMMKEEN11
[775]     {SPR_KEEN,11,-1,{NULL},S_NULL,0,0},   // S_COMMKEEN12
[776]     {SPR_KEEN,12,4,{NULL},S_KEENPAIN2,0,0}, // S_KEENPAIN
[777]     {SPR_KEEN,12,8,{A_Pain},S_KEENSTND,0,0},  // S_KEENPAIN2
[778]     {SPR_BBRN,0,-1,{NULL},S_NULL,0,0},    // S_BRAIN
[779]     {SPR_BBRN,1,36,{A_BrainPain},S_BRAIN,0,0},  // S_BRAIN_PAIN
[780]     {SPR_BBRN,0,100,{A_BrainScream},S_BRAIN_DIE2,0,0},  // S_BRAIN_DIE1
[781]     {SPR_BBRN,0,10,{NULL},S_BRAIN_DIE3,0,0},  // S_BRAIN_DIE2
[782]     {SPR_BBRN,0,10,{NULL},S_BRAIN_DIE4,0,0},  // S_BRAIN_DIE3
[783]     {SPR_BBRN,0,-1,{A_BrainDie},S_NULL,0,0},  // S_BRAIN_DIE4
[784]     {SPR_SSWV,0,10,{A_Look},S_BRAINEYE,0,0},  // S_BRAINEYE
[785]     {SPR_SSWV,0,181,{A_BrainAwake},S_BRAINEYE1,0,0},  // S_BRAINEYESEE
[786]     {SPR_SSWV,0,150,{A_BrainSpit},S_BRAINEYE1,0,0}, // S_BRAINEYE1
[787]     {SPR_BOSF,32768,3,{A_SpawnSound},S_SPAWN2,0,0}, // S_SPAWN1
[788]     {SPR_BOSF,32769,3,{A_SpawnFly},S_SPAWN3,0,0}, // S_SPAWN2
[789]     {SPR_BOSF,32770,3,{A_SpawnFly},S_SPAWN4,0,0}, // S_SPAWN3
[790]     {SPR_BOSF,32771,3,{A_SpawnFly},S_SPAWN1,0,0}, // S_SPAWN4
[791]     {SPR_FIRE,32768,4,{A_Fire},S_SPAWNFIRE2,0,0}, // S_SPAWNFIRE1
[792]     {SPR_FIRE,32769,4,{A_Fire},S_SPAWNFIRE3,0,0}, // S_SPAWNFIRE2
[793]     {SPR_FIRE,32770,4,{A_Fire},S_SPAWNFIRE4,0,0}, // S_SPAWNFIRE3
[794]     {SPR_FIRE,32771,4,{A_Fire},S_SPAWNFIRE5,0,0}, // S_SPAWNFIRE4
[795]     {SPR_FIRE,32772,4,{A_Fire},S_SPAWNFIRE6,0,0}, // S_SPAWNFIRE5
[796]     {SPR_FIRE,32773,4,{A_Fire},S_SPAWNFIRE7,0,0}, // S_SPAWNFIRE6
[797]     {SPR_FIRE,32774,4,{A_Fire},S_SPAWNFIRE8,0,0}, // S_SPAWNFIRE7
[798]     {SPR_FIRE,32775,4,{A_Fire},S_NULL,0,0},   // S_SPAWNFIRE8
[799]     {SPR_MISL,32769,10,{NULL},S_BRAINEXPLODE2,0,0}, // S_BRAINEXPLODE1
[800]     {SPR_MISL,32770,10,{NULL},S_BRAINEXPLODE3,0,0}, // S_BRAINEXPLODE2
[801]     {SPR_MISL,32771,10,{A_BrainExplode},S_NULL,0,0},  // S_BRAINEXPLODE3
[802]     {SPR_ARM1,0,6,{NULL},S_ARM1A,0,0},  // S_ARM1
[803]     {SPR_ARM1,32769,7,{NULL},S_ARM1,0,0}, // S_ARM1A
[804]     {SPR_ARM2,0,6,{NULL},S_ARM2A,0,0},  // S_ARM2
[805]     {SPR_ARM2,32769,6,{NULL},S_ARM2,0,0}, // S_ARM2A
[806]     {SPR_BAR1,0,6,{NULL},S_BAR2,0,0}, // S_BAR1
[807]     {SPR_BAR1,1,6,{NULL},S_BAR1,0,0}, // S_BAR2
[808]     {SPR_BEXP,32768,5,{NULL},S_BEXP2,0,0},  // S_BEXP
[809]     {SPR_BEXP,32769,5,{A_Scream},S_BEXP3,0,0},  // S_BEXP2
[810]     {SPR_BEXP,32770,5,{NULL},S_BEXP4,0,0},  // S_BEXP3
[811]     {SPR_BEXP,32771,10,{A_Explode},S_BEXP5,0,0},  // S_BEXP4
[812]     {SPR_BEXP,32772,10,{NULL},S_NULL,0,0},  // S_BEXP5
[813]     {SPR_FCAN,32768,4,{NULL},S_BBAR2,0,0},  // S_BBAR1
[814]     {SPR_FCAN,32769,4,{NULL},S_BBAR3,0,0},  // S_BBAR2
[815]     {SPR_FCAN,32770,4,{NULL},S_BBAR1,0,0},  // S_BBAR3
[816]     {SPR_BON1,0,6,{NULL},S_BON1A,0,0},  // S_BON1
[817]     {SPR_BON1,1,6,{NULL},S_BON1B,0,0},  // S_BON1A
[818]     {SPR_BON1,2,6,{NULL},S_BON1C,0,0},  // S_BON1B
[819]     {SPR_BON1,3,6,{NULL},S_BON1D,0,0},  // S_BON1C
[820]     {SPR_BON1,2,6,{NULL},S_BON1E,0,0},  // S_BON1D
[821]     {SPR_BON1,1,6,{NULL},S_BON1,0,0}, // S_BON1E
[822]     {SPR_BON2,0,6,{NULL},S_BON2A,0,0},  // S_BON2
[823]     {SPR_BON2,1,6,{NULL},S_BON2B,0,0},  // S_BON2A
[824]     {SPR_BON2,2,6,{NULL},S_BON2C,0,0},  // S_BON2B
[825]     {SPR_BON2,3,6,{NULL},S_BON2D,0,0},  // S_BON2C
[826]     {SPR_BON2,2,6,{NULL},S_BON2E,0,0},  // S_BON2D
[827]     {SPR_BON2,1,6,{NULL},S_BON2,0,0}, // S_BON2E
[828]     {SPR_BKEY,0,10,{NULL},S_BKEY2,0,0}, // S_BKEY
[829]     {SPR_BKEY,32769,10,{NULL},S_BKEY,0,0},  // S_BKEY2
[830]     {SPR_RKEY,0,10,{NULL},S_RKEY2,0,0}, // S_RKEY
[831]     {SPR_RKEY,32769,10,{NULL},S_RKEY,0,0},  // S_RKEY2
[832]     {SPR_YKEY,0,10,{NULL},S_YKEY2,0,0}, // S_YKEY
[833]     {SPR_YKEY,32769,10,{NULL},S_YKEY,0,0},  // S_YKEY2
[834]     {SPR_BSKU,0,10,{NULL},S_BSKULL2,0,0}, // S_BSKULL
[835]     {SPR_BSKU,32769,10,{NULL},S_BSKULL,0,0},  // S_BSKULL2
[836]     {SPR_RSKU,0,10,{NULL},S_RSKULL2,0,0}, // S_RSKULL
[837]     {SPR_RSKU,32769,10,{NULL},S_RSKULL,0,0},  // S_RSKULL2
[838]     {SPR_YSKU,0,10,{NULL},S_YSKULL2,0,0}, // S_YSKULL
[839]     {SPR_YSKU,32769,10,{NULL},S_YSKULL,0,0},  // S_YSKULL2
[840]     {SPR_STIM,0,-1,{NULL},S_NULL,0,0},  // S_STIM
[841]     {SPR_MEDI,0,-1,{NULL},S_NULL,0,0},  // S_MEDI
[842]     {SPR_SOUL,32768,6,{NULL},S_SOUL2,0,0},  // S_SOUL
[843]     {SPR_SOUL,32769,6,{NULL},S_SOUL3,0,0},  // S_SOUL2
[844]     {SPR_SOUL,32770,6,{NULL},S_SOUL4,0,0},  // S_SOUL3
[845]     {SPR_SOUL,32771,6,{NULL},S_SOUL5,0,0},  // S_SOUL4
[846]     {SPR_SOUL,32770,6,{NULL},S_SOUL6,0,0},  // S_SOUL5
[847]     {SPR_SOUL,32769,6,{NULL},S_SOUL,0,0}, // S_SOUL6
[848]     {SPR_PINV,32768,6,{NULL},S_PINV2,0,0},  // S_PINV
[849]     {SPR_PINV,32769,6,{NULL},S_PINV3,0,0},  // S_PINV2
[850]     {SPR_PINV,32770,6,{NULL},S_PINV4,0,0},  // S_PINV3
[851]     {SPR_PINV,32771,6,{NULL},S_PINV,0,0}, // S_PINV4
[852]     {SPR_PSTR,32768,-1,{NULL},S_NULL,0,0},  // S_PSTR
[853]     {SPR_PINS,32768,6,{NULL},S_PINS2,0,0},  // S_PINS
[854]     {SPR_PINS,32769,6,{NULL},S_PINS3,0,0},  // S_PINS2
[855]     {SPR_PINS,32770,6,{NULL},S_PINS4,0,0},  // S_PINS3
[856]     {SPR_PINS,32771,6,{NULL},S_PINS,0,0}, // S_PINS4
[857]     {SPR_MEGA,32768,6,{NULL},S_MEGA2,0,0},  // S_MEGA
[858]     {SPR_MEGA,32769,6,{NULL},S_MEGA3,0,0},  // S_MEGA2
[859]     {SPR_MEGA,32770,6,{NULL},S_MEGA4,0,0},  // S_MEGA3
[860]     {SPR_MEGA,32771,6,{NULL},S_MEGA,0,0}, // S_MEGA4
[861]     {SPR_SUIT,32768,-1,{NULL},S_NULL,0,0},  // S_SUIT
[862]     {SPR_PMAP,32768,6,{NULL},S_PMAP2,0,0},  // S_PMAP
[863]     {SPR_PMAP,32769,6,{NULL},S_PMAP3,0,0},  // S_PMAP2
[864]     {SPR_PMAP,32770,6,{NULL},S_PMAP4,0,0},  // S_PMAP3
[865]     {SPR_PMAP,32771,6,{NULL},S_PMAP5,0,0},  // S_PMAP4
[866]     {SPR_PMAP,32770,6,{NULL},S_PMAP6,0,0},  // S_PMAP5
[867]     {SPR_PMAP,32769,6,{NULL},S_PMAP,0,0}, // S_PMAP6
[868]     {SPR_PVIS,32768,6,{NULL},S_PVIS2,0,0},  // S_PVIS
[869]     {SPR_PVIS,1,6,{NULL},S_PVIS,0,0}, // S_PVIS2
[870]     {SPR_CLIP,0,-1,{NULL},S_NULL,0,0},  // S_CLIP
[871]     {SPR_AMMO,0,-1,{NULL},S_NULL,0,0},  // S_AMMO
[872]     {SPR_ROCK,0,-1,{NULL},S_NULL,0,0},  // S_ROCK
[873]     {SPR_BROK,0,-1,{NULL},S_NULL,0,0},  // S_BROK
[874]     {SPR_CELL,0,-1,{NULL},S_NULL,0,0},  // S_CELL
[875]     {SPR_CELP,0,-1,{NULL},S_NULL,0,0},  // S_CELP
[876]     {SPR_SHEL,0,-1,{NULL},S_NULL,0,0},  // S_SHEL
[877]     {SPR_SBOX,0,-1,{NULL},S_NULL,0,0},  // S_SBOX
[878]     {SPR_BPAK,0,-1,{NULL},S_NULL,0,0},  // S_BPAK
[879]     {SPR_BFUG,0,-1,{NULL},S_NULL,0,0},  // S_BFUG
[880]     {SPR_MGUN,0,-1,{NULL},S_NULL,0,0},  // S_MGUN
[881]     {SPR_CSAW,0,-1,{NULL},S_NULL,0,0},  // S_CSAW
[882]     {SPR_LAUN,0,-1,{NULL},S_NULL,0,0},  // S_LAUN
[883]     {SPR_PLAS,0,-1,{NULL},S_NULL,0,0},  // S_PLAS
[884]     {SPR_SHOT,0,-1,{NULL},S_NULL,0,0},  // S_SHOT
[885]     {SPR_SGN2,0,-1,{NULL},S_NULL,0,0},  // S_SHOT2
[886]     {SPR_COLU,32768,-1,{NULL},S_NULL,0,0},  // S_COLU
[887]     {SPR_SMT2,0,-1,{NULL},S_NULL,0,0},  // S_STALAG
[888]     {SPR_GOR1,0,10,{NULL},S_BLOODYTWITCH2,0,0}, // S_BLOODYTWITCH
[889]     {SPR_GOR1,1,15,{NULL},S_BLOODYTWITCH3,0,0}, // S_BLOODYTWITCH2
[890]     {SPR_GOR1,2,8,{NULL},S_BLOODYTWITCH4,0,0},  // S_BLOODYTWITCH3
[891]     {SPR_GOR1,1,6,{NULL},S_BLOODYTWITCH,0,0}, // S_BLOODYTWITCH4
[892]     {SPR_PLAY,13,-1,{NULL},S_NULL,0,0}, // S_DEADTORSO
[893]     {SPR_PLAY,18,-1,{NULL},S_NULL,0,0}, // S_DEADBOTTOM
[894]     {SPR_POL2,0,-1,{NULL},S_NULL,0,0},  // S_HEADSONSTICK
[895]     {SPR_POL5,0,-1,{NULL},S_NULL,0,0},  // S_GIBS
[896]     {SPR_POL4,0,-1,{NULL},S_NULL,0,0},  // S_HEADONASTICK
[897]     {SPR_POL3,32768,6,{NULL},S_HEADCANDLES2,0,0}, // S_HEADCANDLES
[898]     {SPR_POL3,32769,6,{NULL},S_HEADCANDLES,0,0},  // S_HEADCANDLES2
[899]     {SPR_POL1,0,-1,{NULL},S_NULL,0,0},  // S_DEADSTICK
[900]     {SPR_POL6,0,6,{NULL},S_LIVESTICK2,0,0}, // S_LIVESTICK
[901]     {SPR_POL6,1,8,{NULL},S_LIVESTICK,0,0},  // S_LIVESTICK2
[902]     {SPR_GOR2,0,-1,{NULL},S_NULL,0,0},  // S_MEAT2
[903]     {SPR_GOR3,0,-1,{NULL},S_NULL,0,0},  // S_MEAT3
[904]     {SPR_GOR4,0,-1,{NULL},S_NULL,0,0},  // S_MEAT4
[905]     {SPR_GOR5,0,-1,{NULL},S_NULL,0,0},  // S_MEAT5
[906]     {SPR_SMIT,0,-1,{NULL},S_NULL,0,0},  // S_STALAGTITE
[907]     {SPR_COL1,0,-1,{NULL},S_NULL,0,0},  // S_TALLGRNCOL
[908]     {SPR_COL2,0,-1,{NULL},S_NULL,0,0},  // S_SHRTGRNCOL
[909]     {SPR_COL3,0,-1,{NULL},S_NULL,0,0},  // S_TALLREDCOL
[910]     {SPR_COL4,0,-1,{NULL},S_NULL,0,0},  // S_SHRTREDCOL
[911]     {SPR_CAND,32768,-1,{NULL},S_NULL,0,0},  // S_CANDLESTIK
[912]     {SPR_CBRA,32768,-1,{NULL},S_NULL,0,0},  // S_CANDELABRA
[913]     {SPR_COL6,0,-1,{NULL},S_NULL,0,0},  // S_SKULLCOL
[914]     {SPR_TRE1,0,-1,{NULL},S_NULL,0,0},  // S_TORCHTREE
[915]     {SPR_TRE2,0,-1,{NULL},S_NULL,0,0},  // S_BIGTREE
[916]     {SPR_ELEC,0,-1,{NULL},S_NULL,0,0},  // S_TECHPILLAR
[917]     {SPR_CEYE,32768,6,{NULL},S_EVILEYE2,0,0}, // S_EVILEYE
[918]     {SPR_CEYE,32769,6,{NULL},S_EVILEYE3,0,0}, // S_EVILEYE2
[919]     {SPR_CEYE,32770,6,{NULL},S_EVILEYE4,0,0}, // S_EVILEYE3
[920]     {SPR_CEYE,32769,6,{NULL},S_EVILEYE,0,0},  // S_EVILEYE4
[921]     {SPR_FSKU,32768,6,{NULL},S_FLOATSKULL2,0,0},  // S_FLOATSKULL
[922]     {SPR_FSKU,32769,6,{NULL},S_FLOATSKULL3,0,0},  // S_FLOATSKULL2
[923]     {SPR_FSKU,32770,6,{NULL},S_FLOATSKULL,0,0}, // S_FLOATSKULL3
[924]     {SPR_COL5,0,14,{NULL},S_HEARTCOL2,0,0}, // S_HEARTCOL
[925]     {SPR_COL5,1,14,{NULL},S_HEARTCOL,0,0},  // S_HEARTCOL2
[926]     {SPR_TBLU,32768,4,{NULL},S_BLUETORCH2,0,0}, // S_BLUETORCH
[927]     {SPR_TBLU,32769,4,{NULL},S_BLUETORCH3,0,0}, // S_BLUETORCH2
[928]     {SPR_TBLU,32770,4,{NULL},S_BLUETORCH4,0,0}, // S_BLUETORCH3
[929]     {SPR_TBLU,32771,4,{NULL},S_BLUETORCH,0,0},  // S_BLUETORCH4
[930]     {SPR_TGRN,32768,4,{NULL},S_GREENTORCH2,0,0},  // S_GREENTORCH
[931]     {SPR_TGRN,32769,4,{NULL},S_GREENTORCH3,0,0},  // S_GREENTORCH2
[932]     {SPR_TGRN,32770,4,{NULL},S_GREENTORCH4,0,0},  // S_GREENTORCH3
[933]     {SPR_TGRN,32771,4,{NULL},S_GREENTORCH,0,0}, // S_GREENTORCH4
[934]     {SPR_TRED,32768,4,{NULL},S_REDTORCH2,0,0},  // S_REDTORCH
[935]     {SPR_TRED,32769,4,{NULL},S_REDTORCH3,0,0},  // S_REDTORCH2
[936]     {SPR_TRED,32770,4,{NULL},S_REDTORCH4,0,0},  // S_REDTORCH3
[937]     {SPR_TRED,32771,4,{NULL},S_REDTORCH,0,0}, // S_REDTORCH4
[938]     {SPR_SMBT,32768,4,{NULL},S_BTORCHSHRT2,0,0},  // S_BTORCHSHRT
[939]     {SPR_SMBT,32769,4,{NULL},S_BTORCHSHRT3,0,0},  // S_BTORCHSHRT2
[940]     {SPR_SMBT,32770,4,{NULL},S_BTORCHSHRT4,0,0},  // S_BTORCHSHRT3
[941]     {SPR_SMBT,32771,4,{NULL},S_BTORCHSHRT,0,0}, // S_BTORCHSHRT4
[942]     {SPR_SMGT,32768,4,{NULL},S_GTORCHSHRT2,0,0},  // S_GTORCHSHRT
[943]     {SPR_SMGT,32769,4,{NULL},S_GTORCHSHRT3,0,0},  // S_GTORCHSHRT2
[944]     {SPR_SMGT,32770,4,{NULL},S_GTORCHSHRT4,0,0},  // S_GTORCHSHRT3
[945]     {SPR_SMGT,32771,4,{NULL},S_GTORCHSHRT,0,0}, // S_GTORCHSHRT4
[946]     {SPR_SMRT,32768,4,{NULL},S_RTORCHSHRT2,0,0},  // S_RTORCHSHRT
[947]     {SPR_SMRT,32769,4,{NULL},S_RTORCHSHRT3,0,0},  // S_RTORCHSHRT2
[948]     {SPR_SMRT,32770,4,{NULL},S_RTORCHSHRT4,0,0},  // S_RTORCHSHRT3
[949]     {SPR_SMRT,32771,4,{NULL},S_RTORCHSHRT,0,0}, // S_RTORCHSHRT4
[950]     {SPR_HDB1,0,-1,{NULL},S_NULL,0,0},  // S_HANGNOGUTS
[951]     {SPR_HDB2,0,-1,{NULL},S_NULL,0,0},  // S_HANGBNOBRAIN
[952]     {SPR_HDB3,0,-1,{NULL},S_NULL,0,0},  // S_HANGTLOOKDN
[953]     {SPR_HDB4,0,-1,{NULL},S_NULL,0,0},  // S_HANGTSKULL
[954]     {SPR_HDB5,0,-1,{NULL},S_NULL,0,0},  // S_HANGTLOOKUP
[955]     {SPR_HDB6,0,-1,{NULL},S_NULL,0,0},  // S_HANGTNOBRAIN
[956]     {SPR_POB1,0,-1,{NULL},S_NULL,0,0},  // S_COLONGIBS
[957]     {SPR_POB2,0,-1,{NULL},S_NULL,0,0},  // S_SMALLPOOL
[958]     {SPR_BRS1,0,-1,{NULL},S_NULL,0,0},    // S_BRAINSTEM
[959]     {SPR_TLMP,32768,4,{NULL},S_TECHLAMP2,0,0},  // S_TECHLAMP
[960]     {SPR_TLMP,32769,4,{NULL},S_TECHLAMP3,0,0},  // S_TECHLAMP2
[961]     {SPR_TLMP,32770,4,{NULL},S_TECHLAMP4,0,0},  // S_TECHLAMP3
[962]     {SPR_TLMP,32771,4,{NULL},S_TECHLAMP,0,0},   // S_TECHLAMP4
[963]     {SPR_TLP2,32768,4,{NULL},S_TECH2LAMP2,0,0}, // S_TECH2LAMP
[964]     {SPR_TLP2,32769,4,{NULL},S_TECH2LAMP3,0,0}, // S_TECH2LAMP2
[965]     {SPR_TLP2,32770,4,{NULL},S_TECH2LAMP4,0,0}, // S_TECH2LAMP3
[966]     {SPR_TLP2,32771,4,{NULL},S_TECH2LAMP,0,0},  // S_TECH2LAMP4
[967]     {SPR_TNT1,0,-1,{NULL},S_TNT1,0,0},          // S_TNT1


*** Frames new to MBF, SMMU, and Eternity:

Note: the code pointers here are not inside brackets, nor are the Unknown1 or
 Unknown2 fields present, but it all still works exactly the same.

[968]  {SPR_MISL,32768,1000,A_Die,S_GRENADE},      // S_GRENADE
[969]  {SPR_MISL,32769,4,A_Scream,S_DETONATE2},    // S_DETONATE
[970]  {SPR_MISL,32770,6,A_Detonate,S_DETONATE3},  // S_DETONATE2
[971]  {SPR_MISL,32771,10,NULL,S_NULL},            // S_DETONATE3
[972]  {SPR_DOGS,0,10,A_Look,S_DOGS_STND2},  // S_DOGS_STND
[973]  {SPR_DOGS,1,10,A_Look,S_DOGS_STND}, // S_DOGS_STND2
[974]  {SPR_DOGS,0,2,A_Chase,S_DOGS_RUN2}, // S_DOGS_RUN1
[975]  {SPR_DOGS,0,2,A_Chase,S_DOGS_RUN3}, // S_DOGS_RUN2
[976]  {SPR_DOGS,1,2,A_Chase,S_DOGS_RUN4}, // S_DOGS_RUN3
[977]  {SPR_DOGS,1,2,A_Chase,S_DOGS_RUN5}, // S_DOGS_RUN4
[978]  {SPR_DOGS,2,2,A_Chase,S_DOGS_RUN6}, // S_DOGS_RUN5
[979]  {SPR_DOGS,2,2,A_Chase,S_DOGS_RUN7}, // S_DOGS_RUN6
[980]  {SPR_DOGS,3,2,A_Chase,S_DOGS_RUN8}, // S_DOGS_RUN7
[981]  {SPR_DOGS,3,2,A_Chase,S_DOGS_RUN1}, // S_DOGS_RUN8
[982]  {SPR_DOGS,4,8,A_FaceTarget,S_DOGS_ATK2},  // S_DOGS_ATK1
[983]  {SPR_DOGS,5,8,A_FaceTarget,S_DOGS_ATK3},  // S_DOGS_ATK2
[984]  {SPR_DOGS,6,8,A_SargAttack,S_DOGS_RUN1},  // S_DOGS_ATK3
[985]  {SPR_DOGS,7,2,NULL,S_DOGS_PAIN2}, // S_DOGS_PAIN
[986]  {SPR_DOGS,7,2,A_Pain,S_DOGS_RUN1},  // S_DOGS_PAIN2
[987]  {SPR_DOGS,8,8,NULL,S_DOGS_DIE2},  // S_DOGS_DIE1
[988]  {SPR_DOGS,9,8,A_Scream,S_DOGS_DIE3},  // S_DOGS_DIE2
[989]  {SPR_DOGS,10,4,NULL,S_DOGS_DIE4}, // S_DOGS_DIE3
[990]  {SPR_DOGS,11,4,A_Fall,S_DOGS_DIE5}, // S_DOGS_DIE4
[991]  {SPR_DOGS,12,4,NULL,S_DOGS_DIE6}, // S_DOGS_DIE5
[992]  {SPR_DOGS,13,-1,NULL,S_NULL}, // S_DOGS_DIE6
[993]  {SPR_DOGS,13,5,NULL,S_DOGS_RAISE2}, // S_DOGS_RAISE1
[994]  {SPR_DOGS,12,5,NULL,S_DOGS_RAISE3}, // S_DOGS_RAISE2
[995]  {SPR_DOGS,11,5,NULL,S_DOGS_RAISE4}, // S_DOGS_RAISE3
[996]  {SPR_DOGS,10,5,NULL,S_DOGS_RAISE5}, // S_DOGS_RAISE4
[997]  {SPR_DOGS,9,5,NULL,S_DOGS_RAISE6},  // S_DOGS_RAISE5
[998]  {SPR_DOGS,8,5,NULL,S_DOGS_RUN1},  // S_DOGS_RAISE6

[999]  {SPR_BFGG,0,10,A_BFGsound,S_OLDBFG1+1},  // S_OLDBFG1

*** Frames 1000-1039 are defined through macros, so individual information is
    not available (it would be exceedingly unwise to attempt to edit them).
[1000-1007]  OLDBFG_8FRAMES(0)
[1008-1015]  OLDBFG_8FRAMES(8)
[1016-1023]  OLDBFG_8FRAMES(16) 
[1024-1031]  OLDBFG_8FRAMES(24)
[1032-1039]  OLDBFG_8FRAMES(32)

[1040]  {SPR_BFGG,1,0,A_Light0,S_OLDBFG43}, // S_OLDBFG42
[1041]  {SPR_BFGG,1,20,A_ReFire,S_BFG},   // S_OLDBFG43
[1042]  {SPR_PLS1,32768,6,NULL,S_PLS1BALL2},  // S_PLS1BALL
[1043]  {SPR_PLS1,32769,6,NULL,S_PLS1BALL}, // S_PLS1BALL2
[1044]  {SPR_PLS1,32770,4,NULL,S_PLS1EXP2}, // S_PLS1EXP
[1045]  {SPR_PLS1,32771,4,NULL,S_PLS1EXP3}, // S_PLS1EXP2
[1046]  {SPR_PLS1,32772,4,NULL,S_PLS1EXP4}, // S_PLS1EXP3
[1047]  {SPR_PLS1,32773,4,NULL,S_PLS1EXP5}, // S_PLS1EXP4
[1048]  {SPR_PLS1,32774,4,NULL,S_NULL}, // S_PLS1EXP5
[1049]  {SPR_PLS2,32768,4,NULL,S_PLS2BALL2}, // S_PLS2BALL
[1050]  {SPR_PLS2,32769,4,NULL,S_PLS2BALL},  // S_PLS2BALL2
[1051]  {SPR_PLS2,32770,6,NULL,S_PLS2BALLX2},  // S_PLS2BALLX1
[1052]  {SPR_PLS2,32771,6,NULL,S_PLS2BALLX3},  // S_PLS2BALLX2
[1053]  {SPR_PLS2,32772,6,NULL,S_NULL}, // S_PLS2BALLX3
[1054]  {SPR_MISL,32769,8,A_Mushroom,S_EXPLODE2},  // S_MUSHROOM
[1055]  {SPR_PART,0,8,NULL,S_NULL},   // S_PART1
[1056]  {SPR_MNTR,0,10,A_Look,S_MNTR_LOOK2}, // S_MNTR_LOOK1
[1057]  {SPR_MNTR,1,10,A_Look,S_MNTR_LOOK1}, // S_MNTR_LOOK2
[1058]  {SPR_MNTR,0,5,A_Chase,S_MNTR_WALK2}, // S_MNTR_WALK1
[1059]  {SPR_MNTR,1,5,A_Chase,S_MNTR_WALK3}, // S_MNTR_WALK2
[1060]  {SPR_MNTR,2,5,A_Chase,S_MNTR_WALK4}, // S_MNTR_WALK3
[1061]  {SPR_MNTR,3,5,A_Chase,S_MNTR_WALK1}, // S_MNTR_WALK4
[1062]  {SPR_MNTR,21,10,A_FaceTarget,S_MNTR_ATK1_2}, // S_MNTR_ATK1_1
[1063]  {SPR_MNTR,22,7,A_FaceTarget,S_MNTR_ATK1_3},  // S_MNTR_ATK1_2
[1064]  {SPR_MNTR,23,12,A_MinotaurAtk1,S_MNTR_WALK1}, // S_MNTR_ATK1_3
[1065]  {SPR_MNTR,21,10,A_MinotaurDecide,S_MNTR_ATK2_2}, // S_MNTR_ATK2_1
[1066]  {SPR_MNTR,24,4,A_FaceTarget,S_MNTR_ATK2_3}, // S_MNTR_ATK2_2
[1067]  {SPR_MNTR,25,9,A_MinotaurAtk2,S_MNTR_WALK1}, // S_MNTR_ATK2_3
[1068]  {SPR_MNTR,21,10,A_FaceTarget,S_MNTR_ATK3_2}, // S_MNTR_ATK3_1
[1069]  {SPR_MNTR,22,7,A_FaceTarget,S_MNTR_ATK3_3},  // S_MNTR_ATK3_2
[1070]  {SPR_MNTR,23,12,A_MinotaurAtk3,S_MNTR_WALK1}, // S_MNTR_ATK3_3
[1071]  {SPR_MNTR,23,12,NULL,S_MNTR_ATK3_1}, // S_MNTR_ATK3_4
[1072]  {SPR_MNTR,20,2,A_MinotaurCharge,S_MNTR_ATK4_1}, // S_MNTR_ATK4_1
[1073]  {SPR_MNTR,4,3,NULL,S_MNTR_PAIN2}, // S_MNTR_PAIN1
[1074]  {SPR_MNTR,4,6,A_Pain,S_MNTR_WALK1}, // S_MNTR_PAIN2
[1075]  {SPR_MNTR,5,6,NULL,S_MNTR_DIE2}, // S_MNTR_DIE1
[1076]  {SPR_MNTR,6,5,NULL,S_MNTR_DIE3}, // S_MNTR_DIE2
[1077]  {SPR_MNTR,7,6,A_Scream,S_MNTR_DIE4}, // S_MNTR_DIE3
[1078]  {SPR_MNTR,8,5,NULL,S_MNTR_DIE5}, // S_MNTR_DIE4
[1079]  {SPR_MNTR,9,6,NULL,S_MNTR_DIE6}, // S_MNTR_DIE5
[1080]  {SPR_MNTR,10,5,NULL,S_MNTR_DIE7}, // S_MNTR_DIE6
[1081]  {SPR_MNTR,11,6,NULL,S_MNTR_DIE8}, // S_MNTR_DIE7
[1082]  {SPR_MNTR,12,5,A_Fall,S_MNTR_DIE9}, // S_MNTR_DIE8
[1083]  {SPR_MNTR,13,6,NULL,S_MNTR_DIE10}, // S_MNTR_DIE9
[1084]  {SPR_MNTR,14,5,NULL,S_MNTR_DIE11}, // S_MNTR_DIE10
[1085]  {SPR_MNTR,15,6,NULL,S_MNTR_DIE12}, // S_MNTR_DIE11
[1086]  {SPR_MNTR,16,5,NULL,S_MNTR_DIE13}, // S_MNTR_DIE12
[1087]  {SPR_MNTR,17,6,NULL,S_MNTR_DIE14}, // S_MNTR_DIE13
[1088]  {SPR_MNTR,18,5,NULL,S_MNTR_DIE15}, // S_MNTR_DIE14
[1089]  {SPR_MNTR,19,-1,A_ETCBossDeath,S_NULL}, // S_MNTR_DIE15
[1090]  {SPR_FX12,32768,6,NULL,S_MNTRFX1_2}, // S_MNTRFX1_1
[1091]  {SPR_FX12,32769,6,NULL,S_MNTRFX1_1}, // S_MNTRFX1_2
[1092]  {SPR_FX12,32770,5,NULL,S_MNTRFXI1_2}, // S_MNTRFXI1_1
[1093]  {SPR_FX12,32771,5,NULL,S_MNTRFXI1_3}, // S_MNTRFXI1_2
[1094]  {SPR_FX12,32772,5,NULL,S_MNTRFXI1_4}, // S_MNTRFXI1_3
[1095]  {SPR_FX12,32773,5,NULL,S_MNTRFXI1_5}, // S_MNTRFXI1_4
[1096]  {SPR_FX12,32774,5,NULL,S_MNTRFXI1_6}, // S_MNTRFXI1_5
[1097]  {SPR_FX12,32775,5,NULL,S_NULL}, // S_MNTRFXI1_6  
[1098]  {SPR_FX13,0,2,A_MntrFloorFire,S_MNTRFX2_1},   // S_MNTRFX2_1
[1099]  {SPR_FX13,32776,4,A_Explode,S_MNTRFXI2_2},   // S_MNTRFXI2_1
[1100]  {SPR_FX13,32777,4,NULL,S_MNTRFXI2_3},         // S_MNTRFXI2_2
[1101]  {SPR_FX13,32778,4,NULL,S_MNTRFXI2_4},         // S_MNTRFXI2_3
[1102]  {SPR_FX13,32779,4,NULL,S_MNTRFXI2_5},         // S_MNTRFXI2_4
[1103]  {SPR_FX13,32780,4,NULL,S_NULL},               // S_MNTRFXI2_5
[1104]  {SPR_FX13,32771,4,NULL,S_MNTRFX3_2},  // S_MNTRFX3_1
[1105]  {SPR_FX13,32770,4,NULL,S_MNTRFX3_3},  // S_MNTRFX3_2
[1106]  {SPR_FX13,32769,5,NULL,S_MNTRFX3_4},  // S_MNTRFX3_3
[1107]  {SPR_FX13,32770,5,NULL,S_MNTRFX3_5},  // S_MNTRFX3_4
[1108]  {SPR_FX13,32771,5,NULL,S_MNTRFX3_6},  // S_MNTRFX3_5
[1109]  {SPR_FX13,32772,5,NULL,S_MNTRFX3_7},  // S_MNTRFX3_6
[1110]  {SPR_FX13,32773,4,NULL,S_MNTRFX3_8},  // S_MNTRFX3_7
[1111]  {SPR_FX13,32774,4,NULL,S_MNTRFX3_9},  // S_MNTRFX3_8
[1112]  {SPR_FX13,32775,4,NULL,S_NULL},       // S_MNTRFX3_9
[1113]  {SPR_FX04,1,4,NULL,S_PHOENIXPUFF2},   // S_PHOENIXPUFF1
[1114]  {SPR_FX04,2,4,NULL,S_PHOENIXPUFF3},   // S_PHOENIXPUFF2
[1115]  {SPR_FX04,3,4,NULL,S_PHOENIXPUFF4},   // S_PHOENIXPUFF3
[1116]  {SPR_FX04,4,4,NULL,S_PHOENIXPUFF5},   // S_PHOENIXPUFF4
[1117]  {SPR_FX04,5,4,NULL,S_NULL},           // S_PHOENIXPUFF5
[1118]  {SPR_TNT1,0,120,A_AmbSound,S_SND_WIND}, // S_SND_WIND
[1119]  {SPR_TNT1,0,90,A_AmbSound,S_SND_WATER}, // S_SND_WATER
[1120]  {SPR_TNT1,0,82,A_AmbSound,S_SND_WATERFL}, // S_SND_WATERFL
[1121]  {SPR_TNT1,0,14,A_AmbSound,S_SND_LAUGH1},  // S_SND_LAUGH1
[1122]  {SPR_TNT1,0,34,A_AmbSound,S_SND_DRIP},    // S_SND_DRIP
[1123]  {SPR_TNT1,0,105,A_ColgSound,S_SND_FOREST}, // S_SND_FOREST
[1124]  {SPR_TNT1,0,105,A_ColgSound,S_SND_SWAMP},  // S_SND_SWAMP
[1125]  {SPR_TRE3,0,-1,NULL,S_NULL},  // S_TRE3_1
[1126]  {SPR_TRE4,0,-1,NULL,S_NULL},  // S_TRE4_1
[1127]  {SPR_TRE5,0,-1,NULL,S_NULL},  // S_TRE5_1
[1128]  {SPR_TRDT,0,32,NULL,S_TRDT_1}, // S_TRDT_1
[1129]  {SPR_TRDT,1,8,A_Scream,S_TRDT_DTH2},  // S_TRDT_DTH1
[1130]  {SPR_TRDT,2,8,NULL,S_TRDT_DTH3},      // S_TRDT_DTH2
[1131]  {SPR_TRDT,3,8,NULL,S_TRDT_DTH4},      // S_TRDT_DTH3
[1132]  {SPR_TRDT,4,8,NULL,S_TRDT_DTH5},      // S_TRDT_DTH4
[1133]  {SPR_TRDT,5,8,A_Fall,S_TRDT_DTH6},    // S_TRDT_DTH5
[1134]  {SPR_TRDT,6,-1,NULL,S_NULL},          // S_TRDT_DTH6
[1135]  {SPR_MSS1,0,-1,NULL,S_NULL},  // S_MOSS1
[1136]  {SPR_MSS2,0,-1,NULL,S_NULL},  // S_MOSS2
[1137]  {SPR_CLER,0,6,A_Look,S_CLER_STND2},   // S_CLER_STND1
[1138]  {SPR_CLER,1,6,A_Look,S_CLER_STND1},   // S_CLER_STND2
[1139]  {SPR_CLER,0,4,A_Chase,S_CLER_WALK2},  // S_CLER_WALK1
[1140]  {SPR_CLER,1,4,A_Chase,S_CLER_WALK3},  // S_CLER_WALK2
[1141]  {SPR_CLER,2,4,A_Chase,S_CLER_WALK4},  // S_CLER_WALK3
[1142]  {SPR_CLER,3,4,A_Chase,S_CLER_WALK1},  // S_CLER_WALK4
[1143]  {SPR_CLER,4,6,A_SkelWhoosh,S_CLER_ATK2},   // S_CLER_ATK1
[1144]  {SPR_CLER,5,6,A_FaceTarget,S_CLER_ATK3},   // S_CLER_ATK2
[1145]  {SPR_CLER,6,6,A_ClericAtk,S_CLER_WALK1},   // S_CLER_ATK3
[1146]  {SPR_CLER,7,8,A_Pain,S_CLER_WALK1},   // S_CLER_PAIN
[1147]  {SPR_CLER,8,8,A_Scream,S_CLER_DTH2},  // S_CLER_DTH1
[1148]  {SPR_CLER,9,8,NULL,S_CLER_DTH3},     // S_CLER_DTH2
[1149]  {SPR_CLER,10,8,NULL,S_CLER_DTH4},    // S_CLER_DTH3
[1150]  {SPR_CLER,11,8,NULL,S_CLER_DTH5},    // S_CLER_DTH4
[1151]  {SPR_CLER,12,8,NULL,S_CLER_DTH6},    // S_CLER_DTH5
[1152]  {SPR_CLER,13,8,NULL,S_CLER_DTH7},    // S_CLER_DTH6
[1153]  {SPR_CLER,14,8,NULL,S_CLER_DTH8},    // S_CLER_DTH7
[1154]  {SPR_CLER,15,8,A_Fall,S_CLER_DTH9},  // S_CLER_DTH8
[1155]  {SPR_CLER,16,-1,NULL,S_NULL},         // S_CLER_DTH9
[1156]  {SPR_CLER,17,5,A_XScream,S_CLER_XDTH2},  // S_CLER_XDTH1
[1157]  {SPR_CLER,18,5,NULL,S_CLER_XDTH3},       // S_CLER_XDTH2
[1158]  {SPR_CLER,19,5,NULL,S_CLER_XDTH4},       // S_CLER_XDTH3
[1159]  {SPR_CLER,20,5,NULL,S_CLER_XDTH5},       // S_CLER_XDTH4
[1160]  {SPR_CLER,21,5,NULL,S_CLER_XDTH6},       // S_CLER_XDTH5
[1161]  {SPR_CLER,22,5,NULL,S_CLER_XDTH7},       // S_CLER_XDTH6
[1162]  {SPR_CLER,23,5,NULL,S_CLER_XDTH8},       // S_CLER_XDTH7
[1163]  {SPR_CLER,24,5,NULL,S_CLER_XDTH9},       // S_CLER_XDTH8
[1164]  {SPR_CLER,25,5,A_Fall,S_CLER_XDTH10},    // S_CLER_XDTH9
[1165]  {SPR_CLER,26,-1,NULL,S_NULL},            // S_CLER_XDTH10
[1166]  {SPR_CLER,15,5,NULL,S_CLER_RAISE2},   // S_CLER_RAISE1
[1167]  {SPR_CLER,14,5,NULL,S_CLER_RAISE3},   // S_CLER_RAISE2
[1168]  {SPR_CLER,13,5,NULL,S_CLER_RAISE4},   // S_CLER_RAISE3
[1169]  {SPR_CLER,12,5,NULL,S_CLER_RAISE5},   // S_CLER_RAISE4
[1170]  {SPR_CLER,11,5,NULL,S_CLER_RAISE6},   // S_CLER_RAISE5
[1171]  {SPR_CLER,10,5,NULL,S_CLER_RAISE7},   // S_CLER_RAISE6
[1172]  {SPR_CLER,9,5,NULL,S_CLER_RAISE8},    // S_CLER_RAISE7
[1173]  {SPR_CLER,8,5,NULL,S_CLER_WALK1},     // S_CLER_RAISE8
[1174]  {SPR_CBAL,32768,2,NULL,S_CBAL_2},     // S_CBAL_1
[1175]  {SPR_CBAL,32769,2,NULL,S_CBAL_1},     // S_CBAL_2
[1176]  {SPR_CBAL,32770,5,NULL,S_CBAL_X2},    // S_CBAL_X1
[1177]  {SPR_CBAL,32771,5,NULL,S_CBAL_X3},    // S_CBAL_X2
[1178]  {SPR_CBAL,32772,5,NULL,S_CBAL_X4},    // S_CBAL_X3
[1179]  {SPR_CBAL,32773,5,NULL,S_NULL},       // S_CBAL_X4
[1180]  {SPR_FBUL,32768,4,NULL,S_ZFIREBULL2}, // S_ZFIREBULL1
[1181]  {SPR_FBUL,32769,4,NULL,S_ZFIREBULL3}, // S_ZFIREBULL2
[1182]  {SPR_FBUL,32770,4,NULL,S_ZFIREBULL4}, // S_ZFIREBULL3
[1183]  {SPR_FBUL,32771,4,NULL,S_ZFIREBULL5}, // S_ZFIREBULL4
[1184]  {SPR_FBUL,32772,4,NULL,S_ZFIREBULL6}, // S_ZFIREBULL5
[1185]  {SPR_FBUL,32773,4,NULL,S_ZFIREBULL7}, // S_ZFIREBULL6
[1186]  {SPR_FBUL,32774,4,NULL,S_ZFIREBULL1}, // S_ZFIREBULL7
[1187]  {SPR_FBUL,7,-1,NULL,S_NULL},          // S_ZFIREBULL_U
[1188]  {SPR_SPSH,0,8,NULL,S_SPLASH2},        // S_SPLASH1
[1189]  {SPR_SPSH,1,8,NULL,S_SPLASH3},        // S_SPLASH2
[1190]  {SPR_SPSH,2,8,NULL,S_SPLASH4},        // S_SPLASH3
[1191]  {SPR_SPSH,3,16,NULL,S_NULL},          // S_SPLASH4
[1192]  {SPR_SPSH,3,10,NULL,S_NULL},          // S_SPLASHX
[1193]  {SPR_SPSH,4,5,NULL,S_SPLASHBASE2},    // S_SPLASHBASE1
[1194]  {SPR_SPSH,5,5,NULL,S_SPLASHBASE3},    // S_SPLASHBASE2
[1195]  {SPR_SPSH,6,5,NULL,S_SPLASHBASE4},    // S_SPLASHBASE3
[1196]  {SPR_SPSH,7,5,NULL,S_SPLASHBASE5},    // S_SPLASHBASE4
[1197]  {SPR_SPSH,8,5,NULL,S_SPLASHBASE6},    // S_SPLASHBASE5
[1198]  {SPR_SPSH,9,5,NULL,S_SPLASHBASE7},    // S_SPLASHBASE6
[1199]  {SPR_SPSH,10,5,NULL,S_NULL},          // S_SPLASHBASE7
[1200]  {SPR_SLDG,0,8,NULL,S_SLUDGE2},        // S_SLUDGE1
[1201]  {SPR_SLDG,1,8,NULL,S_SLUDGE3},        // S_SLUDGE2
[1202]  {SPR_SLDG,2,8,NULL,S_SLUDGE4},        // S_SLUDGE3
[1203]  {SPR_SLDG,3,8,NULL,S_NULL},          // S_SLUDGE4
[1204]  {SPR_SLDG,3,6,NULL,S_NULL},          // S_SLUDGEX
[1205]  {SPR_SLDG,4,6,NULL,S_SLUDGEBASE2},    // S_SLUDGEBASE1
[1206]  {SPR_SLDG,5,6,NULL,S_SLUDGEBASE3},    // S_SLUDGEBASE2
[1207]  {SPR_SLDG,6,6,NULL,S_SLUDGEBASE4},    // S_SLUDGEBASE3
[1208]  {SPR_SLDG,7,6,NULL,S_NULL},           // S_SLUDGEBASE4
[1209]  {SPR_TNT1,0,100,A_AmbSound,S_SND_BUBBLE},  // S_SND_BUBBLE
[1210]  {SPR_TNT1,0,151,A_AmbSound,S_SND_SHLURP},  // S_SND_SHLURP
[1211]  {SPR_TNT1,0,103,A_AmbSound,S_SND_ROCKS},   // S_SND_ROCKS
[1212]  {SPR_TNT1,0,20,A_FogSpawn,S_SPAWNFOG1},       // S_SPAWNFOG1
[1213]  {SPR_FOGS,0,7,A_FogMove,S_FOGPATCHS2},        // S_FOGPATCHS1
[1214]  {SPR_FOGS,1,7,A_FogMove,S_FOGPATCHS3},        // S_FOGPATCHS2
[1215]  {SPR_FOGS,2,7,A_FogMove,S_FOGPATCHS4},        // S_FOGPATCHS3
[1216]  {SPR_FOGS,3,7,A_FogMove,S_FOGPATCHS5},        // S_FOGPATCHS4
[1217]  {SPR_FOGS,4,7,A_FogMove,S_FOGPATCHS1},        // S_FOGPATCHS5
[1218]  {SPR_FOGS,4,5,NULL,S_NULL},                   // S_FOGPATCHS0
[1219]  {SPR_FOGM,0,7,A_FogMove,S_FOGPATCHM2},        // S_FOGPATCHM1
[1220]  {SPR_FOGM,1,7,A_FogMove,S_FOGPATCHM3},        // S_FOGPATCHM2
[1221]  {SPR_FOGM,2,7,A_FogMove,S_FOGPATCHM4},        // S_FOGPATCHM3
[1222]  {SPR_FOGM,3,7,A_FogMove,S_FOGPATCHM5},        // S_FOGPATCHM4
[1223]  {SPR_FOGM,4,7,A_FogMove,S_FOGPATCHM1},        // S_FOGPATCHM5
[1224]  {SPR_FOGS,0,5,NULL,S_FOGPATCHMA},             // S_FOGPATCHM0
[1225]  {SPR_FOGS,1,5,NULL,S_FOGPATCHMB},             // S_FOGPATCHMA
[1226]  {SPR_FOGS,2,5,NULL,S_FOGPATCHMC},             // S_FOGPATCHMB
[1227]  {SPR_FOGS,3,5,NULL,S_FOGPATCHMD},             // S_FOGPATCHMC
[1228]  {SPR_FOGS,4,5,NULL,S_FOGPATCHS0},             // S_FOGPATCHMD
[1229]  {SPR_FOGL,0,7,A_FogMove,S_FOGPATCHL2},        // S_FOGPATCHL1
[1230]  {SPR_FOGL,1,7,A_FogMove,S_FOGPATCHL3},        // S_FOGPATCHL2
[1231]  {SPR_FOGL,2,7,A_FogMove,S_FOGPATCHL4},        // S_FOGPATCHL3
[1232]  {SPR_FOGL,3,7,A_FogMove,S_FOGPATCHL5},        // S_FOGPATCHL4
[1233]  {SPR_FOGL,4,7,A_FogMove,S_FOGPATCHL1},        // S_FOGPATCHL5
[1234]  {SPR_FOGM,0,4,NULL,S_FOGPATCHLA},             // S_FOGPATCHL0
[1235]  {SPR_FOGM,1,4,NULL,S_FOGPATCHLB},             // S_FOGPATCHLA
[1236]  {SPR_FOGM,2,4,NULL,S_FOGPATCHLC},             // S_FOGPATCHLB
[1237]  {SPR_FOGM,3,4,NULL,S_FOGPATCHLD},             // S_FOGPATCHLC
[1238]  {SPR_FOGM,4,4,NULL,S_FOGPATCHM0},             // S_FOGPATCHLD
[1239]  {SPR_CLER,0,4,A_Cleric2Chase,S_LCLER_WALK2},  // S_LCLER_WALK1
[1240]  {SPR_CLER,1,4,A_Cleric2Chase,S_LCLER_WALK3},  // S_LCLER_WALK2
[1241]  {SPR_CLER,2,4,A_Cleric2Chase,S_LCLER_WALK4},  // S_LCLER_WALK3
[1242]  {SPR_CLER,3,4,A_Cleric2Chase,S_LCLER_WALK1},  // S_LCLER_WALK4
[1243]  {SPR_CLER,0,4,A_Cleric2Decide,S_LCLER_ATK2},  // S_LCLER_ATK1
[1244]  {SPR_CLER,4,6,A_SkelWhoosh,S_LCLER_ATK3},     // S_LCLER_ATK2
[1245]  {SPR_CLER,5,6,A_FaceTarget,S_LCLER_ATK4},     // S_LCLER_ATK3
[1246]  {SPR_CLER,6,6,A_Cleric2Attack,S_LCLER_WALK1}, // S_LCLER_ATK4
[1247]  {SPR_CLER,7,8,A_Pain,S_LCLER_WALK1},          // S_LCLER_PAIN
[1248]  {SPR_LCLR,32768,3,NULL,S_LCLER_SPEC2},        // S_LCLER_SPEC
[1249]  {SPR_LCLR,32769,3,NULL,S_LCLER_SPEC3},        // S_LCLER_SPEC2
[1250]  {SPR_LCLR,32770,4,NULL,S_LCLER_WALK1},        // S_LCLER_SPEC3
[1251]  {SPR_CLER,0,10,NULL,S_LCLER_WALK1},           // S_LCLER_TELE1
[1252]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK2},  // S_LCLER_BREAK1
[1253]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK3},  // S_LCLER_BREAK2
[1254]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK4},  // S_LCLER_BREAK3
[1255]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK5},  // S_LCLER_BREAK4
[1256]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK6},  // S_LCLER_BREAK5
[1257]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK7},  // S_LCLER_BREAK6
[1258]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK8},  // S_LCLER_BREAK7
[1259]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK9},  // S_LCLER_BREAK8
[1260]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_BREAK10}, // S_LCLER_BREAK9
[1261]  {SPR_LCLR,32768,4,A_ClericBreak,S_LCLER_WALK1},   // S_LCLER_BREAK10
[1262]  {SPR_BRPL,0,-1,NULL,S_NULL},  // S_BCOLUMN
[1263]  {SPR_BARL,0,-1,NULL,S_NULL},  // S_WOODBARREL
[1264]  {SPR_TST0,0,-1,NULL,S_NULL},  // S_TABLESTUFF1
[1265]  {SPR_TST1,0,-1,NULL,S_NULL},  // S_TABLESTUFF2
[1266]  {SPR_ARMR,0,-1,NULL,S_NULL},  // S_SUITOFARMOR
[1267]  {SPR_STM1,0,-1,NULL,S_NULL},  // S_TREESTUMP1
[1268]  {SPR_STM2,0,-1,NULL,S_NULL},  // S_TREESTUMP2
[1269]  {SPR_SKH1,0,-1,NULL,S_NULL},  // S_HANGINGSKULL
[1270]  {SPR_GAR8,0,-1,NULL,S_NULL},  // S_SHORTGARGOYLE
[1271]  {SPR_GAR4,0,-1,NULL,S_NULL},  // S_TALLGARGOYLE
[1272]  {SPR_WTRH,32768,6,NULL,S_WALLTORCH2}, // S_WALLTORCH1
[1273]  {SPR_WTRH,32769,6,NULL,S_WALLTORCH3}, // S_WALLTORCH2
[1274]  {SPR_WTRH,32770,6,NULL,S_WALLTORCH1}, // S_WALLTORCH3
[1275]  {SPR_CHDL,0,4,NULL,S_CHANDELIER2},    // S_CHANDELIER1
[1276]  {SPR_CHDL,1,4,NULL,S_CHANDELIER3},    // S_CHANDELIER2
[1277]  {SPR_CHDL,2,4,NULL,S_CHANDELIER1},    // S_CHANDELIER3
[1278]  {SPR_MSH2,0,-1,NULL,S_NULL},  // S_BIGSHROOM
[1279]  {SPR_CDRN,0,-1,NULL,S_NULL},  // S_CAULDRON_U
[1280]  {SPR_TST2,0,-1,NULL,S_NULL},  // S_TABLESTUFF3
[1281]  {SPR_SWMV,0,-1,NULL,S_NULL},  // S_SWAMPVINE
[1282]  {SPR_CPS5,0,-1,NULL,S_NULL},  // S_CORPSEHANGINGMANGLED
[1283]  {SPR_CPS6,0,-1,NULL,S_NULL},  // S_CORPSESITTING
[1284]  {SPR_CPS1,0,-1,NULL,S_NULL},  // S_CORPSEIMPALED
[1285]  {SPR_CPS4,0,-1,NULL,S_NULL},  // S_CORPSEHANGING
[1286]  {SPR_TMS6,0,-1,NULL,S_NULL},  // S_TOMBSTONETALL
[1287]  {SPR_TMS1,0,-1,NULL,S_NULL},  // S_TOMBSTONERIP
[1288]  {SPR_TMS5,0,-1,NULL,S_NULL},  // S_TOMBSTONEANKH
[1289]  {SPR_RCK1,0,-1,NULL,S_NULL},  // S_ROCKSMALL
[1290]  {SPR_RCK4,0,-1,NULL,S_NULL},  // S_ROCKLARGE
[1291]  {SPR_TST6,0,-1,NULL,S_NULL},  // S_TABLESTUFF4
[1292]  {SPR_TST7,0,-1,NULL,S_NULL},  // S_TABLESTUFF5
[1293]  {SPR_GRD1,0,-1,NULL,S_NULL},  // S_GUARD1STAND
[1294]  {SPR_DWRF,0,16,A_Look,S_DWARFSTAND2}, // S_DWARFSTAND1
[1295]  {SPR_DWRF,1,16,A_Look,S_DWARFSTAND1}, // S_DWARFSTAND2
[1296]  {SPR_DWRF,0,4,A_Chase,S_DWARFWALK2},  // S_DWARFWALK1
[1297]  {SPR_DWRF,1,4,A_Chase,S_DWARFWALK1},  // S_DWARFWALK2
[1298]  {SPR_DWRF,2,16,A_Pain,S_DWARFWALK1},  // S_DWARFPAIN
[1299]  {SPR_DWRF,3,16,A_Scream,S_DWARFDEATH2},   // S_DWARFDEATH1  
[1300]  {SPR_DWRF,3,35,A_DwarfDie,S_DWARFDEATH3}, // S_DWARFDEATH2
[1301]  {SPR_TNT1,0,16,A_DwarfDie,S_DWARFDEATH4}, // S_DWARFDEATH3
[1302]  {SPR_TNT1,0,16,A_Fall,S_DWARFDEATH5},     // S_DWARFDEATH4
[1303]  {SPR_TNT1,0,-1,NULL,S_NULL},          // S_DWARFDEATH5
[1304]  {SPR_DWRF,2,4,A_DwarfLDOCMagic,S_DWARFATK2},  // S_DWARFATK1
[1305]  {SPR_DWRF,32775,4,A_FaceTarget,S_DWARFREDAURA2},          // S_DWARFREDAURA1
[1306]  {SPR_DWRF,32776,4,A_FaceTarget,S_DWARFREDAURA3},          // S_DWARFREDAURA2
[1307]  {SPR_DWRF,32777,4,A_FaceTarget,S_DWARFATK2},              // S_DWARFREDAURA3
[1308]  {SPR_DWRF,32772,4,A_FaceTarget,S_DWARFBLUEAURA2},         // S_DWARFBLUEAURA1
[1309]  {SPR_DWRF,32773,4,A_FaceTarget,S_DWARFBLUEAURA3},         // S_DWARFBLUEAURA2
[1310]  {SPR_DWRF,32774,4,A_FaceTarget,S_DWARFATK2},              // S_DWARFBLUEAURA3
[1311]  {SPR_DWRF,32778,4,A_FaceTarget,S_DWARFGREENAURA2},       // S_DWARFGREENAURA1
[1312]  {SPR_DWRF,32779,4,A_FaceTarget,S_DWARFGREENAURA3},       // S_DWARFGREENAURA2
[1313]  {SPR_DWRF,32780,4,A_FaceTarget,S_DWARFWALK1},             // S_DWARFGREENAURA3
[1314]  {SPR_DWRF,32781,4,A_FaceTarget,S_DWARFPURPLEAURA2},      // S_DWARFPURPLEAURA1
[1315]  {SPR_DWRF,32782,4,A_FaceTarget,S_DWARFPURPLEAURA3},      // S_DWARFPURPLEAURA2
[1316]  {SPR_DWRF,32783,4,A_FaceTarget,S_DWARFATK2},             // S_DWARFPURPLEAURA3
[1317]  {SPR_DWRF,2,4,A_DwarfFWAEMagic,S_DWARFWALK1}, // S_DWARFATK2
[1318]  {SPR_DWRF,0,-1,NULL,S_NULL},          // S_DWARF1TALK1  dialog dwarf
[1319]  {SPR_GRD1,0,-1,NULL,S_NULL},          // S_GUARD2TALK1  dialog guard
[1320]  {SPR_CYBN,0,10,A_CyberGuardSigh,S_CYBERGUARD1},  // S_CYBERGUARD1
[1321]  {SPR_CYBN,0,10,A_Look,S_CYBERGUARD2LOOK},        // S_CYBERGUARD2LOOK
[1322]  {SPR_CYBR,6,20,A_CyberGuardWake,S_CYBER_RUN1},   // S_CYBERGUARD2SEE
[1323]  {SPR_FDWF,0,16,A_Look,S_ALTDWARFSTAND2},            // S_ALTDWARFSTAND1
[1324]  {SPR_FDWF,1,16,A_Look,S_ALTDWARFSTAND1},            // S_ALTDWARFSTAND2
[1325]  {SPR_FDWF,0,4,A_DwarfAlterEgoChase,S_ALTDWARFWALK2},  // S_ALTDWARFWALK1
[1326]  {SPR_FDWF,1,4,A_DwarfAlterEgoChase,S_ALTDWARFWALK1},  // S_ALTDWARFWALK2
[1327]  {SPR_FDWF,2,16,A_Pain,S_ALTDWARFWALK1},               // S_ALTDWARFPAIN
[1328]  {SPR_FDWF,3,16,A_Scream,S_ALTDWARFDEATH2},   // S_ALTDWARFDEATH1  
[1329]  {SPR_FDWF,3,35,A_DwarfDie,S_ALTDWARFDEATH3}, // S_ALTDWARFDEATH2
[1330]  {SPR_TNT1,0,16,A_DwarfDie,S_ALTDWARFDEATH4}, // S_ALTDWARFDEATH3
[1331]  {SPR_TNT1,0,16,A_Fall,S_ALTDWARFDEATH5},     // S_ALTDWARFDEATH4
[1332]  {SPR_TNT1,0,-1,NULL,S_NULL},                 // S_ALTDWARFDEATH5
[1333]  {SPR_FDWF,2,4,A_DwarfAlterEgoAttack,S_ALTDWARFWALK1}, // S_ALTDWARFATK1
[1334]  {SPR_MISG,0,1,A_WeaponReady,S_GRENADEW}, // S_GRENADEW
[1335]  {SPR_MISG,0,1,A_Lower,S_GRENADEDOWN}, // S_GRENADEDOWN
[1336]  {SPR_MISG,0,1,A_Raise,S_GRENADEUP}, // S_GRENADEUP
[1337]  {SPR_MISG,1,8,A_GunFlash,S_GRENADE2}, // S_GRENADE1
[1338]  {SPR_MISG,1,12,A_FireGrenade,S_GRENADE3}, // S_GRENADE2
[1339]  {SPR_MISG,1,0,A_ReFire,S_GRENADEW},  // S_GRENADE3
[1340]  {SPR_MISF,32768,3,A_Light1,S_GRENADEFLASH2},  // S_GRENADEFLASH1
[1341]  {SPR_MISF,32769,4,NULL,S_GRENADEFLASH3},  // S_GRENADEFLASH2
[1342]  {SPR_MISF,32770,4,A_Light2,S_GRENADEFLASH4},  // S_GRENADEFLASH3
[1343]  {SPR_MISF,32771,4,A_Light2,S_LIGHTDONE},  // S_GRENADEFLASH4
[1344]  {SPR_GRLN,0,-1,NULL,S_NULL}, // S_GRNDLAUNCHER
[1345]  {SPR_GRNP,0,-1,NULL,S_NULL}, // S_GRENADEPICKUP
[1346]  {SPR_GREN,0,135,A_Die,S_GRENADEFLIGHT}, // S_GRENADEFLIGHT
[1347]  {SPR_PNS2,32768,6,NULL,S_PNS2_2}, // S_PNS2_1
[1348]  {SPR_PNS2,32769,6,NULL,S_PNS2_3}, // S_PNS2_2
[1349]  {SPR_PNS2,32770,6,NULL,S_PNS2_4}, // S_PNS2_3
[1350]  {SPR_PNS2,32771,6,NULL,S_PNS2_1}, // S_PNS2_4
[1351]  {SPR_FX04,32768,5,A_PhoenixTracer,S_PHOENIXSHOT1},  // S_PHOENIXSHOT1
[1352]  {SPR_FX04,1,4,NULL,S_PHOENIXSHOTX2},   // S_PHOENIXSHOTX1
[1353]  {SPR_FX04,2,4,NULL,S_PHOENIXSHOTX3},   // S_PHOENIXSHOTX2
[1354]  {SPR_FX04,3,4,NULL,S_PHOENIXSHOTX4},   // S_PHOENIXSHOTX3
[1355]  {SPR_FX04,4,4,NULL,S_PHOENIXSHOTX5},   // S_PHOENIXSHOTX4
[1356]  {SPR_FX04,5,4,NULL,S_NULL},           // S_PHOENIXSHOTX5
[1357]  {SPR_CAXE,0,6,A_AxePieceFall,S_AXEFALL2},  // S_AXEFALL1
[1358]  {SPR_CAXE,1,6,A_AxePieceFall,S_AXEFALL3},  // S_AXEFALL2
[1359]  {SPR_CAXE,2,6,A_AxePieceFall,S_AXEFALL1},  // S_AXEFALL3
[1360]  {SPR_CAXE,3,-1,NULL,S_NULL},               // S_AXEFALL4
[1361]  {SPR_CSTF,0,6,A_AxePieceFall,S_STAFF_FALL2}, // S_STAFF_FALL1
[1362]  {SPR_CSTF,1,6,A_AxePieceFall,S_STAFF_FALL1}, // S_STAFF_FALL2
[1363]  {SPR_CSTF,2,-1,NULL,S_NULL},                 // S_STAFF_FALL3
[1364]  {SPR_TGLT,32768,4,A_Sparkle,S_GLITTER2},   // S_GLITTER1
[1365]  {SPR_TGLT,32769,4,A_Sparkle,S_GLITTER3},   // S_GLITTER2
[1366]  {SPR_TGLT,32770,4,A_Sparkle,S_GLITTER4},   // S_GLITTER3
[1367]  {SPR_TGLT,32771,4,A_Sparkle,S_GLITTER5},   // S_GLITTER4
[1368]  {SPR_TGLT,32772,4,A_Sparkle,S_GLITTER1},   // S_GLITTER5
[1369]  {SPR_ABK1,0,-1,NULL,S_NULL}, // S_NECRONOMICON_A
[1370]  {SPR_KEY1,0,-1,NULL,S_NULL}, // S_KEY1
[1371]  {SPR_KEY2,0,-1,NULL,S_NULL}, // S_KEY2
[1372]  {SPR_KEY3,0,-1,NULL,S_NULL}, // S_KEY3
[1373]  {SPR_KEY4,0,-1,NULL,S_NULL}, // S_KEY4 
[1374]  {SPR_KEY5,0,-1,NULL,S_NULL}, // S_KEY5
[1375]  {SPR_KEY6,0,-1,NULL,S_NULL}, // S_KEY6
[1376]  {SPR_KEY7,0,-1,NULL,S_NULL}, // S_KEY7
[1377]  {SPR_KEY8,0,-1,NULL,S_NULL}, // S_KEY8
[1378]  {SPR_KEY9,0,-1,NULL,S_NULL}, // S_KEY9
[1379]  {SPR_KEYA,0,-1,NULL,S_NULL}, // S_KEYA
[1380]  {SPR_KEYB,0,-1,NULL,S_NULL}, // S_KEYB
[1381]  {SPR_NSPD,0,10,A_Look,S_NEWSPIDER_STND2},  // S_NEWSPIDER_STND
[1382]  {SPR_NSPD,1,10,A_Look,S_NEWSPIDER_STND}, // S_NEWSPIDER_STND2
[1383]  {SPR_NSPD,0,3,A_Chase,S_NEWSPIDER_WALK2}, // S_NEWSPIDER_WALK1
[1384]  {SPR_NSPD,1,3,A_Chase,S_NEWSPIDER_WALK1}, // S_NEWSPIDER_WALK2
[1385]  {SPR_NSPD,32768,20,A_FaceTarget,S_NEWSPIDER_FIRE1}, // S_NEWSPIDER_CHECK
[1386]  {SPR_NSPD,32770,4,A_SPosAttack,S_NEWSPIDER_FIRE2},  // S_NEWSPIDER_FIRE1
[1387]  {SPR_NSPD,32771,4,A_SPosAttack,S_NEWSPIDER_REFIRE},  // S_NEWSPIDER_FIRE2
[1388]  {SPR_NSPD,32771,1,A_SpidRefire,S_NEWSPIDER_FIRE1},  // S_NEWSPIDER_REFIRE
[1389]  {SPR_NSPD,8,35,A_Scream,S_NEWSPIDER_DIE2}, // S_NEWSPIDER_DIE1
[1390]  {SPR_NSPD,9,15,NULL,S_NEWSPIDER_DIE3},  // S_NEWSPIDER_DIE2
[1391]  {SPR_NSPD,4,10,NULL,S_NEWSPIDER_DIE4},  // S_NEWSPIDER_DIE3
[1392]  {SPR_NSPD,5,10,NULL,S_NEWSPIDER_DIE5},  // S_NEWSPIDER_DIE4
[1393]  {SPR_NSPD,6,10,NULL,S_NEWSPIDER_DIE6}, // S_NEWSPIDER_DIE5
[1394]  {SPR_NSPD,7,10,A_Fall,S_NEWSPIDER_DIE7}, // S_NEWSPIDER_DIE6
[1395]  {SPR_TNT1,0,30,NULL,S_NEWSPIDER_DIE8}, // S_NEWSPIDER_DIE7
[1396]  {SPR_TNT1,0,-1,A_ETCBossDeath,S_NULL}, // S_NEWSPIDER_DIE8
[1397]  {SPR_TNT1,0,100,A_AmbSound,S_SND_CHAINS}, // S_SND_CHAINS
[1398]  {SPR_TNT1,0,100,A_AmbSound,S_SND_GONG},   // S_SND_GONG
[1399]  {SPR_TNT1,0,100,A_AmbSound,S_SND_LAVA},   // S_SND_LAVA
[1400]  {SPR_TNT1,0,100,A_AmbSound,S_SND_AMB1},   // S_SND_AMB1
[1401]  {SPR_FX15,32768,5,A_MummyHeadScream,S_MUMHEAD_2}, // S_MUMHEAD_1
[1402]  {SPR_FX15,32769,5,NULL,S_MUMHEAD_3}, // S_MUMHEAD_2
[1403]  {SPR_FX15,32770,5,NULL,S_MUMHEAD_1}, // S_MUMHEAD_3
[1404]  {SPR_FX15,32771,5,NULL,S_MUMHEAD_X2}, // S_MUMHEAD_X1
[1405]  {SPR_FX15,32772,5,NULL,S_MUMHEAD_X3}, // S_MUMHEAD_X2
[1406]  {SPR_FX15,32773,5,NULL,S_MUMHEAD_X4}, // S_MUMHEAD_X3
[1407]  {SPR_FX15,32774,5,NULL,S_NULL},       // S_MUMHEAD_X4
[1408]  {SPR_MUMM,0,10,A_Look,S_MUMMY_STAND2}, // S_MUMMY_STAND1
[1409]  {SPR_MUMM,1,10,A_Look,S_MUMMY_STAND1}, // S_MUMMY_STAND2
[1410]  {SPR_MUMM,0,4,A_DwarfAlterEgoChase,S_MUMMY_WALK2},  // S_MUMMY_WALK1
[1411]  {SPR_MUMM,1,4,A_DwarfAlterEgoChase,S_MUMMY_WALK3},  // S_MUMMY_WALK2
[1412]  {SPR_MUMM,2,4,A_DwarfAlterEgoChase,S_MUMMY_WALK4},  // S_MUMMY_WALK3
[1413]  {SPR_MUMM,3,4,A_DwarfAlterEgoChase,S_MUMMY_WALK1},  // S_MUMMY_WALK4
[1414]  {SPR_MUMM,20,5,A_FaceTarget,S_MUMMY_ATK2}, // S_MUMMY_ATK1
[1415]  {SPR_MUMM,32789,5,A_FaceTarget,S_MUMMY_ATK3}, // S_MUMMY_ATK2
[1416]  {SPR_MUMM,20,5,A_FaceTarget,S_MUMMY_ATK4}, // S_MUMMY_ATK3
[1417]  {SPR_MUMM,32789,5,A_FaceTarget,S_MUMMY_ATK5}, // S_MUMMY_ATK4
[1418]  {SPR_MUMM,20,5,A_FaceTarget,S_MUMMY_ATK6}, // S_MUMMY_ATK5
[1419]  {SPR_MUMM,32789,15,A_MummyAttack,S_MUMMY_WALK1}, // S_MUMMY_ATK6
[1420]  {SPR_MUMM,4,4,NULL,S_MUMMY_PAIN2}, // S_MUMMY_PAIN1
[1421]  {SPR_MUMM,4,4,A_Pain,S_MUMMY_WALK1}, // S_MUMMY_PAIN2
[1422]  {SPR_MUMM,5,5,NULL,S_MUMMY_DIE2}, // S_MUMMY_DIE1
[1423]  {SPR_MUMM,6,5,A_Scream,S_MUMMY_DIE3}, // S_MUMMY_DIE2
[1424]  {SPR_MUMM,7,5,A_MummySoul,S_MUMMY_DIE4}, // S_MUMMY_DIE3
[1425]  {SPR_MUMM,8,5,NULL,S_MUMMY_DIE5}, // S_MUMMY_DIE4
[1426]  {SPR_MUMM,9,5,A_Fall,S_MUMMY_DIE6}, // S_MUMMY_DIE5
[1427]  {SPR_MUMM,10,5,NULL,S_MUMMY_DIE7},  // S_MUMMY_DIE6
[1428]  {SPR_MUMM,11,5,NULL,S_MUMMY_DIE8},  // S_MUMMY_DIE7
[1429]  {SPR_MUMM,12,-1,NULL,S_NULL},       // S_MUMMY_DIE8
[1430]  {SPR_MUMM,13,5,NULL,S_MUMMY_SOUL2}, // S_MUMMY_SOUL1
[1431]  {SPR_MUMM,14,5,NULL,S_MUMMY_SOUL3}, // S_MUMMY_SOUL2
[1432]  {SPR_MUMM,15,5,NULL,S_MUMMY_SOUL4}, // S_MUMMY_SOUL3
[1433]  {SPR_MUMM,16,9,NULL,S_MUMMY_SOUL5}, // S_MUMMY_SOUL4
[1434]  {SPR_MUMM,17,5,NULL,S_MUMMY_SOUL6}, // S_MUMMY_SOUL5
[1435]  {SPR_MUMM,18,5,NULL,S_MUMMY_SOUL7}, // S_MUMMY_SOUL6
[1436]  {SPR_MUMM,19,5,NULL,S_NULL}         // S_MUMMY_SOUL7


=======================================================================

###########################
THING DEFAULT "BITS" VALUES
###########################

This comes directly from the source code, with Thing numbers added.
The item names are those used in the source code, not necessarily
what Dehacked might call them.  They should all be identical to the
defaults.

Note: If the Bits2 field is non-zero for a specific thing, its value is shown
      on the line underneath the Bits -- otherwise the value is 0.


1   PLAYER
    SOLID+SHOOTABLE+DROPOFF+PICKUP+NOTDMATCH    
  
2   POSSESSED
    SOLID+SHOOTABLE+COUNTKILL   
  
3   SHOTGUY
    SOLID+SHOOTABLE+COUNTKILL   
  
4   VILE
    SOLID+SHOOTABLE+COUNTKILL   
  
5   FIRE
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT    
  
6   UNDEAD
    SOLID+SHOOTABLE+COUNTKILL   
  
7   TRACER
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY
    SEEKERMISSILE 
  
8   SMOKE
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT    
  
9   FATSO
    SOLID+SHOOTABLE+COUNTKILL   
  
10  FATSHOT
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT    
  
11  CHAINGUY
    SOLID+SHOOTABLE+COUNTKILL   
  
12  TROOP
    SOLID+SHOOTABLE+COUNTKILL
  
13  SERGEANT
    SOLID+SHOOTABLE+COUNTKILL   
  
14  SHADOWS
    SOLID+SHOOTABLE+SHADOW+COUNTKILL   
  
15  HEAD
    SOLID+SHOOTABLE+FLOAT+NOGRAVITY+COUNTKILL   
  
16  BRUISER
    SOLID+SHOOTABLE+COUNTKILL   
  
17  BRUISERSHOT
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT   
  
18  KNIGHT
    SOLID+SHOOTABLE+COUNTKILL   
  
19  SKULL
    SOLID+SHOOTABLE+FLOAT+NOGRAVITY    
  
20  SPIDER
    SOLID+SHOOTABLE+COUNTKILL    
    BOSS
  
21  BABY
    SOLID+SHOOTABLE+COUNTKILL   
  
22  CYBORG
    SOLID+SHOOTABLE+COUNTKILL
    BOSS   
  
23  PAIN
    SOLID+SHOOTABLE+FLOAT+NOGRAVITY+COUNTKILL   
  
24  WOLFSS
    SOLID+SHOOTABLE+COUNTKILL   
  
25  KEEN
    SOLID+SPAWNCEILING+NOGRAVITY+SHOOTABLE+COUNTKILL    
  
26  BOSSBRAIN
    SOLID+SHOOTABLE    
  
27  BOSSSPIT
    NOBLOCKMAP+NOSECTOR    
  
28  BOSSTARGET
    NOBLOCKMAP+NOSECTOR    
  
29  SPAWNSHOT
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+NOCLIP   
  
30  SPAWNFIRE
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT
  
31  BARREL
    SOLID+SHOOTABLE+NOBLOOD   
  
32  TROOPSHOT
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT
  
33  HEADSHOT
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT  
  
34  ROCKET
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY   
  
35  PLASMA
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT
  
36  BFG
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT
  
37  ARACHPLAZ
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT
  
38  PUFF
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT
    NOSPLASH
    
39  BLOOD
    NOBLOCKMAP
    NOSPLASH
  
40  TFOG
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT
  
41  IFOG
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT
  
42  TELEPORTMAN
    NOBLOCKMAP+NOSECTOR    
  
43  EXTRABFG
    NOBLOCKMAP+NOGRAVITY   
  
44  MISC0
    SPECIAL   
  
45  MISC1
    SPECIAL   
  
46  MISC2
    SPECIAL+COUNTITEM    
  
47  MISC3
    SPECIAL+COUNTITEM    
  
48  MISC4
    SPECIAL+NOTDMATCH    
  
49  MISC5
    SPECIAL+NOTDMATCH    
  
50  MISC6
    SPECIAL+NOTDMATCH    
  
51  MISC7
    SPECIAL+NOTDMATCH    
  
52  MISC8
    SPECIAL+NOTDMATCH    
  
53  MISC9
    SPECIAL+NOTDMATCH    
  
54  MISC10
    SPECIAL   
  
55  MISC11
    SPECIAL   
  
56  MISC12
    SPECIAL+COUNTITEM+TRANSLUCENT
  
57  INV
    SPECIAL+COUNTITEM+TRANSLUCENT
  
58  MISC13
    SPECIAL+COUNTITEM    
  
59  INS
    SPECIAL+COUNTITEM+TRANSLUCENT
  
60  MISC14
    SPECIAL   
  
61  MISC15
    SPECIAL+COUNTITEM    
  
62  MISC16
    SPECIAL+COUNTITEM    
  
63  MEGA
    SPECIAL+COUNTITEM+TRANSLUCENT
  
64  CLIP
    SPECIAL   
  
65  MISC17
    SPECIAL   
  
66  MISC18
    SPECIAL   
  
67  MISC19
    SPECIAL   
  
68  MISC20
    SPECIAL   
  
69  MISC21
    SPECIAL   
  
70  MISC22
    SPECIAL   
  
71  MISC23
    SPECIAL   
  
72  MISC24
    SPECIAL   
  
73  MISC25
    SPECIAL   
  
74  CHAINGUN
    SPECIAL   
  
75  MISC26
    SPECIAL   
  
76  MISC27
    SPECIAL   
  
77  MISC28
    SPECIAL   
  
78  SHOTGUN
    SPECIAL   
  
79  SUPERSHOTGUN
    SPECIAL   
  
80  MISC29
    SOLID   
  
81  MISC30
    SOLID   
  
82  MISC31
    SOLID   
  
83  MISC32
    SOLID   
  
84  MISC33
    SOLID   
  
85  MISC34
    SOLID   
  
86  MISC35
    SOLID   
  
87  MISC36
    SOLID   
  
88  MISC37
    SOLID   
  
89  MISC38
    SOLID   
  
90  MISC39
    SOLID   
  
91  MISC40
    SOLID   
  
92  MISC41
    SOLID   
  
93  MISC42
    SOLID   
  
94  MISC43
    SOLID   
  
95  MISC44
    SOLID   
  
96  MISC45
    SOLID   
  
97  MISC46
    SOLID   
  
98  MISC47
    SOLID   
  
99  MISC48
    SOLID   
  
100 MISC49
    0    
  
101 MISC50
    SOLID   
  
102 MISC51
    SOLID+SPAWNCEILING+NOGRAVITY    
  
103 MISC52
    SOLID+SPAWNCEILING+NOGRAVITY    
  
104 MISC53
    SOLID+SPAWNCEILING+NOGRAVITY    
  
105 MISC54
    SOLID+SPAWNCEILING+NOGRAVITY    
  
106 MISC55
    SOLID+SPAWNCEILING+NOGRAVITY    
  
107 MISC56
    SPAWNCEILING+NOGRAVITY   
  
108 MISC57
    SPAWNCEILING+NOGRAVITY   
  
109 MISC58
    SPAWNCEILING+NOGRAVITY   
  
110 MISC59
    SPAWNCEILING+NOGRAVITY   
  
111 MISC60
    SPAWNCEILING+NOGRAVITY   
  
112 MISC61
    0    
  
113 MISC62
    0    
  
114 MISC63
    0    
  
115 MISC64
    0    
  
116 MISC65
    0    
  
117 MISC66
    0    
  
118 MISC67
    0    
  
119 MISC68
    0    
  
120 MISC69
    0    
  
121 MISC70
    SOLID   
  
122 MISC71
    0    
  
123 MISC72
    SOLID   
  
124 MISC73
    SOLID   
  
125 MISC74
    SOLID   
  
126 MISC75
    SOLID   
  
127 MISC76
    SOLID   
  
128 MISC77
    SOLID   
  
129 MISC78
    SOLID+SPAWNCEILING+NOGRAVITY    
  
130 MISC79
    SOLID+SPAWNCEILING+NOGRAVITY    
  
131 MISC80
    SOLID+SPAWNCEILING+NOGRAVITY    
  
132 MISC81
    SOLID+SPAWNCEILING+NOGRAVITY    
  
133 MISC82
    SOLID+SPAWNCEILING+NOGRAVITY    
  
134 MISC83
    SOLID+SPAWNCEILING+NOGRAVITY    
  
135 MISC84
    NOBLOCKMAP    
  
136 MISC85
    NOBLOCKMAP    
  
137 MISC86
    NOBLOCKMAP    

138 PUSH
    NOBLOCKMAP  

139 PULL
    NOBLOCKMAP  

Note: the following things are new to MBF / SMMU / Eternity

140 DOGS
    SOLID+SHOOTABLE+COUNTKILL

141 PLASMA1
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+BOUNCES
    
142 PLASMA2
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+BOUNCES

143 CAMERA
    NOBLOCKMAP
    
144 PARTICLE
    NOGRAVITY+TRANSLUCENT+NOBLOCKMAP
    NOSPLASH

145 MINOTAUR
    SOLID+SHOOTABLE+COUNTKILL+DROPOFF
    BOSS

146 MNTRFX1
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT

147 MNTRFX2
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT

148 MNTRFX3
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT

149 PHOENIXPUFF
    NOBLOCKMAP+NOGRAVITY+TRANSLUCENT
    NOSPLASH

150 SNDWIND
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

151 SNDWATER
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

152 SNDWATER2
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

153 SNDLAUGH
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

154 SNDDRIP
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

155 SNDFOREST
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

156 SNDSWAMP
    NOBLOCKMAP+NOSECTOR
    NOTHRUST

157 TRE3
    SOLID
    NOTHRUST

158 TRE4
    SOLID
    NOTHRUST
    
159 TRE5
    SOLID

160 TRDT
    SOLID+SHOOTABLE+NOBLOOD

161 MOSS1
    SPAWNCEILING+NOGRAVITY

162 MOSS2
    SPAWNCEILING+NOGRAVITY

163 CLERIC
    SOLID+SHOOTABLE+COUNTKILL

164 CLRBALL
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT

165 ZFIREBULL
    SOLID
    
166 ZFIREBULL_UNLIT
    SOLID

167 SPLASH
    NOBLOCKMAP+MISSILE+DROPOFF
    LOGRAV+NOSPLASH

168 SPLASHBASE
    NOBLOCKMAP+NOGRAVITY
    NOSPLASH

169 SLUDGECHUNK
    NOBLOCKMAP+MISSILE+DROPOFF
    LOGRAV+NOSPLASH

170 SLUDGEBASE
    NOBLOCKMAP+NOGRAVITY
    NOSPLASH

171 SNDBUBBLE
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
        
172 SNDSHLURP
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
    
173 SNDROCKS
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
    
174 FOGSPAWNER
    NOBLOCKMAP+NOSECTOR
    NOTHRUST+DONTDRAW+FLOATBOB

175 FOGPATCHS
    NOBLOCKMAP+FLOAT+NOGRAVITY+NOCLIP+TRANSLUCENT

176 FOGPATCHM
    NOBLOCKMAP+FLOAT+NOGRAVITY+NOCLIP+TRANSLUCENT

177 FOGPATCHL
    NOBLOCKMAP+FLOAT+NOGRAVITY+NOCLIP+TRANSLUCENT

178 LEADERCLERIC
    SOLID+SHOOTABLE+COUNTKILL
    BOSS

179 BCOLUMN
    SOLID

180 WBARREL
    SOLID

181 HANGINGSKULL
    SPAWNCEILING+NOGRAVITY

182 WALLTORCH
    NOGRAVITY

183 CHANDELIER
    SPAWNCEILING+NOGRAVITY

184 TABLESTUFF1
    NOBLOCKMAP

185 TABLESTUFF2
    NOBLOCKMAP

186 TABLESTUFF3
    NOBLOCKMAP

187 TABLESTUFF4
    NOBLOCKMAP

188 TABLESTUFF5
    NOBLOCKMAP

189 SUITOFARMOR
    SOLID

190 STUMP1
    SOLID

191 STUMP2
    SOLID

192 GARGOYLE1
    SOLID
    
193 GARGOYLE2
    SOLID
    
194 MUSHROOM
    0
    
195 CAULDRON_UNLIT
    SOLID
    
196 SWAMPVINE
    SOLID
    NOTHRUST
    
197 NEWCORPSE1
    SOLID+SPAWNCEILING+NOGRAVITY

198 NEWCORPSE2
    SOLID

199 NEWCORPSE3
    SOLID

200 NEWCORPSE4
    SOLID+SPAWNCEILING+NOGRAVITY

201 TOMBSTONETALL
    SOLID

202 TOMBSTONERIP
    SOLID

203 TOMBSTONEANKH
    SOLID

204 ROCK1
    0

205 ROCK2
    SOLID

206 GUARD1
    SOLID

207 DWARF
    SOLID+SHOOTABLE+COUNTKILL
    ALWAYSRESPAWN
    
208 DWARFDLG
    SOLID
    
209 GUARDDLG1
    SOLID

210 CYBERGUARD1
    SOLID
    
211 CYBERGUARD2
    SOLID+SHOOTABLE+COUNTKILL
    BOSS+INVULNERABLE

212 ALTERDWARF
    SOLID+SHOOTABLE+COUNTKILL

213 GRENADE
    BOUNCES+DROPOFF
    
214 GRENADEGUN
    SPECIAL
    
215 GRENADEM15
    SPECIAL

216 TOTALINVSPHERE
    SPECIAL+COUNTITEM+TRANSLUCENT
    FLOATBOB

217 PHOENIXSHOT
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY+TRANSLUCENT
    SEEKERMISSILE
    
218 BROKENAXE
    NOBLOCKMAP+DROPOFF+BOUNCES
    
219 BROKENSTAFF
    NOBLOCKMAP+DROPOFF+BOUNCES

220 SPARKLE
    NOBLOCKMAP+NOCLIP+NOGRAVITY+TRANSLUCENT
    NOSPLASH

221 NECRONOMICON_A
    0

222 KEY1
    SPECIAL+NOTDMATCH

223 KEY2
    SPECIAL+NOTDMATCH
    
224 KEY3
    SPECIAL+NOTDMATCH
    
225 KEY4
    SPECIAL+NOTDMATCH
    
226 KEY5
    SPECIAL+NOTDMATCH
    
227 KEY6
    SPECIAL+NOTDMATCH
    
228 KEY7
    SPECIAL+NOTDMATCH
    
229 KEY8
    SPECIAL+NOTDMATCH
    
230 KEY9
    SPECIAL+NOTDMATCH
    
231 KEYA
    SPECIAL+NOTDMATCH
    
232 KEYB
    SPECIAL+NOTDMATCH
    
233 NEWSPIDER
    SOLID+SHOOTABLE+FLOAT+NOGRAVITY+COUNTKILL
    BOSS

234 SNDCHAINS
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
    
235 SNDGONG
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
    
236 SNDLAVA
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
    
237 SNDAMB1
    NOBLOCKMAP+NOSECTOR
    NOTHRUST
    
238 MUMHEAD
    NOBLOCKMAP+MISSILE+DROPOFF+NOGRAVITY
    
239 MUMMY
    SOLID+SHOOTABLE+COUNTKILL
    REMOVEDEAD

240 MUMMYSOUL 
    NOBLOCKMAP+NOGRAVITY
    
/// end of file ETCDEH.TXT - last revised 5/10/01
